
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000483c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a54  08004a54  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a5c  08004a5c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00004568  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000457c  2000457c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015adb  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d9f  00000000  00000000  00035b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  000388c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001248  00000000  00000000  00039c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d54  00000000  00000000  0003ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f4a  00000000  00000000  0005fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3d0d  00000000  00000000  00074b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158813  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005210  00000000  00000000  00158864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080049d4 	.word	0x080049d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	080049d4 	.word	0x080049d4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <vApplicationGetIdleTaskMemory+0x2c>)
 8000504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <vApplicationGetIdleTaskMemory+0x30>)
 800050a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000030 	.word	0x20000030
 8000524:	20000084 	.word	0x20000084

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b08e      	sub	sp, #56	; 0x38
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fc3d 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f83b 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f8fb 	bl	8000730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800053a:	f000 f8a1 	bl	8000680 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800053e:	f000 f8c9 	bl	80006d4 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of led14 */
  osThreadDef(led14, led14_handler, osPriorityNormal, 0, 128);
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <main+0x74>)
 8000544:	f107 041c 	add.w	r4, r7, #28
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led14Handle = osThreadCreate(osThread(led14), NULL);
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fdd6 	bl	800310e <osThreadCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <main+0x78>)
 8000566:	6013      	str	r3, [r2, #0]

  /* definition and creation of led0 */
  osThreadDef(led0, led0_handler, osPriorityHigh, 0, 128);
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <main+0x7c>)
 800056a:	463c      	mov	r4, r7
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led0Handle = osThreadCreate(osThread(led0), NULL);
 800057a:	463b      	mov	r3, r7
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fdc5 	bl	800310e <osThreadCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <main+0x80>)
 8000588:	6013      	str	r3, [r2, #0]
  osThreadSuspend(led0Handle);
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <main+0x80>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fe1d 	bl	80031ce <osThreadSuspend>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000594:	f002 fdb4 	bl	8003100 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x70>
 800059a:	bf00      	nop
 800059c:	080049fc 	.word	0x080049fc
 80005a0:	200007d4 	.word	0x200007d4
 80005a4:	08004a18 	.word	0x08004a18
 80005a8:	200007d8 	.word	0x200007d8

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 fa02 	bl	80049c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800060c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000620:	23a8      	movs	r3, #168	; 0xa8
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000628:	2307      	movs	r3, #7
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ffff 	bl	8001634 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 fa12 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2105      	movs	r1, #5
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fa60 	bl	8001b24 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066a:	f000 f9fb 	bl	8000a64 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART3_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006b8:	f001 ff34 	bl	8002524 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f9cf 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000284 	.word	0x20000284
 80006d0:	40004800 	.word	0x40004800

080006d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070c:	2201      	movs	r2, #1
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	f000 fe6f 	bl	80013fa <HAL_PCD_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f99f 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200002c8 	.word	0x200002c8

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b6d      	ldr	r3, [pc, #436]	; (8000900 <MX_GPIO_Init+0x1d0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a6c      	ldr	r2, [pc, #432]	; (8000900 <MX_GPIO_Init+0x1d0>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b6a      	ldr	r3, [pc, #424]	; (8000900 <MX_GPIO_Init+0x1d0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b66      	ldr	r3, [pc, #408]	; (8000900 <MX_GPIO_Init+0x1d0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a65      	ldr	r2, [pc, #404]	; (8000900 <MX_GPIO_Init+0x1d0>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b63      	ldr	r3, [pc, #396]	; (8000900 <MX_GPIO_Init+0x1d0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b5f      	ldr	r3, [pc, #380]	; (8000900 <MX_GPIO_Init+0x1d0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a5e      	ldr	r2, [pc, #376]	; (8000900 <MX_GPIO_Init+0x1d0>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b5c      	ldr	r3, [pc, #368]	; (8000900 <MX_GPIO_Init+0x1d0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b58      	ldr	r3, [pc, #352]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a57      	ldr	r2, [pc, #348]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b55      	ldr	r3, [pc, #340]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b51      	ldr	r3, [pc, #324]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a50      	ldr	r2, [pc, #320]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b4e      	ldr	r3, [pc, #312]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b4a      	ldr	r3, [pc, #296]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a49      	ldr	r2, [pc, #292]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <MX_GPIO_Init+0x1d0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4843      	ldr	r0, [pc, #268]	; (8000904 <MX_GPIO_Init+0x1d4>)
 80007f6:	f000 fdcd 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4842      	ldr	r0, [pc, #264]	; (8000908 <MX_GPIO_Init+0x1d8>)
 8000800:	f000 fdc8 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <MX_GPIO_Init+0x1dc>)
 800081c:	f000 fc0e 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000820:	2332      	movs	r3, #50	; 0x32
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000830:	230b      	movs	r3, #11
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4834      	ldr	r0, [pc, #208]	; (800090c <MX_GPIO_Init+0x1dc>)
 800083c:	f000 fbfe 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000840:	2386      	movs	r3, #134	; 0x86
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000850:	230b      	movs	r3, #11
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	482d      	ldr	r0, [pc, #180]	; (8000910 <MX_GPIO_Init+0x1e0>)
 800085c:	f000 fbee 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000860:	f244 0381 	movw	r3, #16513	; 0x4081
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <MX_GPIO_Init+0x1d4>)
 800087a:	f000 fbdf 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000890:	230b      	movs	r3, #11
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	481a      	ldr	r0, [pc, #104]	; (8000904 <MX_GPIO_Init+0x1d4>)
 800089c:	f000 fbce 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4814      	ldr	r0, [pc, #80]	; (8000908 <MX_GPIO_Init+0x1d8>)
 80008b8:	f000 fbc0 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <MX_GPIO_Init+0x1d8>)
 80008d0:	f000 fbb4 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e6:	230b      	movs	r3, #11
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x1d8>)
 80008f2:	f000 fba3 	bl	800103c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800
 8000910:	40020000 	.word	0x40020000

08000914 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	if (system_busy == 0) {
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <vApplicationIdleHook+0x48>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d118      	bne.n	8000954 <vApplicationIdleHook+0x40>
		for (int i = 0; i < 3; i++) {
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	e012      	b.n	800094e <vApplicationIdleHook+0x3a>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // 控制蓝灯
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <vApplicationIdleHook+0x4c>)
 800092c:	f000 fd4b 	bl	80013c6 <HAL_GPIO_TogglePin>
			HAL_Delay(500);  // 蓝灯闪烁0.5秒
 8000930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000934:	f000 fa7c 	bl	8000e30 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	4809      	ldr	r0, [pc, #36]	; (8000960 <vApplicationIdleHook+0x4c>)
 800093c:	f000 fd43 	bl	80013c6 <HAL_GPIO_TogglePin>
			HAL_Delay(500);  // 蓝灯熄灭0.5秒
 8000940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000944:	f000 fa74 	bl	8000e30 <HAL_Delay>
		for (int i = 0; i < 3; i++) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3301      	adds	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b02      	cmp	r3, #2
 8000952:	dde9      	ble.n	8000928 <vApplicationIdleHook+0x14>
		}
	}
//    HAL_Delay(1000);  // 蓝灯完成后等待1秒
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	40020400 	.word	0x40020400

08000964 <led14_handler>:
  * @brief 红灯任务
  * 控制红灯闪烁3次，然后唤醒绿灯任务，挂起自身
  */
/* USER CODE END Header_led14_handler */
void led14_handler(void const * argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    for(;;)
    {

        for (int i = 0; i < 3; i++) {
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e014      	b.n	800099c <led14_handler+0x38>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // 控制红灯
 8000972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <led14_handler+0x70>)
 8000978:	f000 fd25 	bl	80013c6 <HAL_GPIO_TogglePin>
            osDelay(500);  // 红灯闪烁0.5秒
 800097c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000980:	f002 fc11 	bl	80031a6 <osDelay>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000988:	4812      	ldr	r0, [pc, #72]	; (80009d4 <led14_handler+0x70>)
 800098a:	f000 fd1c 	bl	80013c6 <HAL_GPIO_TogglePin>
            osDelay(500);  // 红灯熄灭0.5秒
 800098e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000992:	f002 fc08 	bl	80031a6 <osDelay>
        for (int i = 0; i < 3; i++) {
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3301      	adds	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b02      	cmp	r3, #2
 80009a0:	dde7      	ble.n	8000972 <led14_handler+0xe>
        }

        system_busy = 0;  // 标记系统空闲
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <led14_handler+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

        // 延迟一段时间，让空闲任务运行
        osDelay(50);
 80009a8:	2032      	movs	r0, #50	; 0x32
 80009aa:	f002 fbfc 	bl	80031a6 <osDelay>

    	system_busy = 1;  // 标记系统忙碌
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <led14_handler+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]

        osDelay(3000);
 80009b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009b8:	f002 fbf5 	bl	80031a6 <osDelay>

        // 唤醒绿灯任务
        osThreadResume(led0Handle);
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <led14_handler+0x78>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fc11 	bl	80031e8 <osThreadResume>

        // 挂起红灯任务
        osThreadSuspend(led14Handle);
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <led14_handler+0x7c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fbff 	bl	80031ce <osThreadSuspend>
        for (int i = 0; i < 3; i++) {
 80009d0:	e7cc      	b.n	800096c <led14_handler+0x8>
 80009d2:	bf00      	nop
 80009d4:	40020400 	.word	0x40020400
 80009d8:	20000000 	.word	0x20000000
 80009dc:	200007d8 	.word	0x200007d8
 80009e0:	200007d4 	.word	0x200007d4

080009e4 <led0_handler>:
  * @brief 绿灯任务
  * 控制绿灯闪烁4次，然后唤醒红灯任务，挂起自身
  */
/* USER CODE END Header_led0_handler */
void led0_handler(void const * argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    for(;;)
    {
//    	system_busy = 1;  // 标记系统忙碌
        for (int i = 0; i < 4; i++) {
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e012      	b.n	8000a18 <led0_handler+0x34>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // 控制绿灯
 80009f2:	2101      	movs	r1, #1
 80009f4:	480f      	ldr	r0, [pc, #60]	; (8000a34 <led0_handler+0x50>)
 80009f6:	f000 fce6 	bl	80013c6 <HAL_GPIO_TogglePin>
            osDelay(500);  // 绿灯闪烁0.5秒
 80009fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fe:	f002 fbd2 	bl	80031a6 <osDelay>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a02:	2101      	movs	r1, #1
 8000a04:	480b      	ldr	r0, [pc, #44]	; (8000a34 <led0_handler+0x50>)
 8000a06:	f000 fcde 	bl	80013c6 <HAL_GPIO_TogglePin>
            osDelay(500);  // 绿灯熄灭0.5秒
 8000a0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a0e:	f002 fbca 	bl	80031a6 <osDelay>
        for (int i = 0; i < 4; i++) {
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	dde9      	ble.n	80009f2 <led0_handler+0xe>
        }

//        system_busy = 0;  // 标记系统空闲
        // 唤醒红灯任务
        osThreadResume(led14Handle);
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <led0_handler+0x54>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fbe0 	bl	80031e8 <osThreadResume>

        // 挂起绿灯任务
        osThreadSuspend(led0Handle);
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <led0_handler+0x58>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fbce 	bl	80031ce <osThreadSuspend>
        for (int i = 0; i < 4; i++) {
 8000a32:	e7db      	b.n	80009ec <led0_handler+0x8>
 8000a34:	40020400 	.word	0x40020400
 8000a38:	200007d4 	.word	0x200007d4
 8000a3c:	200007d8 	.word	0x200007d8

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d101      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a52:	f000 f9cd 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010000 	.word	0x40010000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	; 0x44
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_MspInit+0x54>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_MspInit+0x54>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	f06f 0001 	mvn.w	r0, #1
 8000ab6:	f000 fa97 	bl	8000fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12c      	bne.n	8000b44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0308 	orr.w	r3, r3, #8
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b34:	2307      	movs	r3, #7
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0x8c>)
 8000b40:	f000 fa7c 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b78:	d13f      	bne.n	8000bfa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_PCD_MspInit+0xac>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_PCD_MspInit+0xac>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <HAL_PCD_MspInit+0xac>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba8:	230a      	movs	r3, #10
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4815      	ldr	r0, [pc, #84]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000bb4:	f000 fa42 	bl	800103c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480e      	ldr	r0, [pc, #56]	; (8000c08 <HAL_PCD_MspInit+0xb0>)
 8000bce:	f000 fa35 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_PCD_MspInit+0xac>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_PCD_MspInit+0xac>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6353      	str	r3, [r2, #52]	; 0x34
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_PCD_MspInit+0xac>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_PCD_MspInit+0xac>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_PCD_MspInit+0xac>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <HAL_InitTick+0xd4>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c38:	f107 020c 	add.w	r2, r7, #12
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f98e 	bl	8001f64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c48:	f001 f978 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c54:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <HAL_InitTick+0xd8>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	0c9b      	lsrs	r3, r3, #18
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <HAL_InitTick+0xe0>)
 8000c64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c86:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c88:	f001 f99e 	bl	8001fc8 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d11b      	bne.n	8000cd2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <HAL_InitTick+0xdc>)
 8000c9c:	f001 f9ee 	bl	800207c <HAL_TIM_Base_Start_IT>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d111      	bne.n	8000cd2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cae:	2019      	movs	r0, #25
 8000cb0:	f000 f9b6 	bl	8001020 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d808      	bhi.n	8000ccc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	2019      	movs	r0, #25
 8000cc0:	f000 f992 	bl	8000fe8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_InitTick+0xe4>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	e002      	b.n	8000cd2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3730      	adds	r7, #48	; 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	200007dc 	.word	0x200007dc
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d26:	f001 fa19 	bl	800215c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200007dc 	.word	0x200007dc

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd7 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f003 fdf9 	bl	800497c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fbcd 	bl	8000528 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d9c:	08004a64 	.word	0x08004a64
  ldr r2, =_sbss
 8000da0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000da4:	2000457c 	.word	0x2000457c

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8fc 	bl	8000fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f7ff ff16 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fe46 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000824 	.word	0x20000824

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000824 	.word	0x20000824

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000000c 	.word	0x2000000c

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff4c 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffa:	f7ff ff61 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8000ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff ffb1 	bl	8000f6c <NVIC_EncodePriority>
 800100a:	4602      	mov	r2, r0
 800100c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff80 	bl	8000f18 <__NVIC_SetPriority>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff54 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e177      	b.n	8001348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8166 	bne.w	8001342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80c0 	beq.w	8001342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b66      	ldr	r3, [pc, #408]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a65      	ldr	r2, [pc, #404]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b63      	ldr	r3, [pc, #396]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a61      	ldr	r2, [pc, #388]	; (8001364 <HAL_GPIO_Init+0x328>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d037      	beq.n	800127a <HAL_GPIO_Init+0x23e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_GPIO_Init+0x330>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d031      	beq.n	8001276 <HAL_GPIO_Init+0x23a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x236>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_GPIO_Init+0x338>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x232>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a54      	ldr	r2, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x33c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x22e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a53      	ldr	r2, [pc, #332]	; (800137c <HAL_GPIO_Init+0x340>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x22a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x344>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x348>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_GPIO_Init+0x34c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x350>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x21a>
 8001252:	2309      	movs	r3, #9
 8001254:	e012      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001256:	230a      	movs	r3, #10
 8001258:	e010      	b.n	800127c <HAL_GPIO_Init+0x240>
 800125a:	2308      	movs	r3, #8
 800125c:	e00e      	b.n	800127c <HAL_GPIO_Init+0x240>
 800125e:	2307      	movs	r3, #7
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001262:	2306      	movs	r3, #6
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x240>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x240>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x240>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x328>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_GPIO_Init+0x354>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a29      	ldr	r2, [pc, #164]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_GPIO_Init+0x354>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_GPIO_Init+0x354>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_GPIO_Init+0x354>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae84 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40022000 	.word	0x40022000
 800138c:	40022400 	.word	0x40022400
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d8:	887a      	ldrh	r2, [r7, #2]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	041a      	lsls	r2, r3, #16
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	400b      	ands	r3, r1
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fc:	b08f      	sub	sp, #60	; 0x3c
 80013fe:	af0a      	add	r7, sp, #40	; 0x28
 8001400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e10f      	b.n	800162c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fb96 	bl	8000b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fb8d 	bl	8002b6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	687e      	ldr	r6, [r7, #4]
 8001458:	466d      	mov	r5, sp
 800145a:	f106 0410 	add.w	r4, r6, #16
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	e894 0003 	ldmia.w	r4, {r0, r1}
 800146a:	e885 0003 	stmia.w	r5, {r0, r1}
 800146e:	1d33      	adds	r3, r6, #4
 8001470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f001 fb18 	bl	8002aa8 <USB_CoreInit>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2202      	movs	r2, #2
 8001482:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0d0      	b.n	800162c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fb7b 	bl	8002b8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e04a      	b.n	8001532 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	333d      	adds	r3, #61	; 0x3d
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	333c      	adds	r3, #60	; 0x3c
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	b298      	uxth	r0, r3
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3344      	adds	r3, #68	; 0x44
 80014d8:	4602      	mov	r2, r0
 80014da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3340      	adds	r3, #64	; 0x40
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3348      	adds	r3, #72	; 0x48
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	334c      	adds	r3, #76	; 0x4c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3354      	adds	r3, #84	; 0x54
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	d3af      	bcc.n	800149c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e044      	b.n	80015cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3b5      	bcc.n	8001542 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	687e      	ldr	r6, [r7, #4]
 80015de:	466d      	mov	r5, sp
 80015e0:	f106 0410 	add.w	r4, r6, #16
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f4:	1d33      	adds	r3, r6, #4
 80015f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f001 fb13 	bl	8002c24 <USB_DevInit>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e00d      	b.n	800162c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fcde 	bl	8002fe6 <USB_DevDisconnect>

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e267      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d075      	beq.n	800173e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001652:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00c      	beq.n	8001678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b85      	ldr	r3, [pc, #532]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001666:	2b08      	cmp	r3, #8
 8001668:	d112      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166a:	4b82      	ldr	r3, [pc, #520]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001676:	d10b      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d05b      	beq.n	800173c <HAL_RCC_OscConfig+0x108>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d157      	bne.n	800173c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e242      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_OscConfig+0x74>
 800169a:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a75      	ldr	r2, [pc, #468]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x98>
 80016b2:	4b70      	ldr	r3, [pc, #448]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6f      	ldr	r2, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b6d      	ldr	r3, [pc, #436]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6c      	ldr	r2, [pc, #432]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016cc:	4b69      	ldr	r3, [pc, #420]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a68      	ldr	r2, [pc, #416]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b66      	ldr	r3, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a65      	ldr	r2, [pc, #404]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fb94 	bl	8000e18 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fb90 	bl	8000e18 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e207      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xc0>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fb80 	bl	8000e18 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fb7c 	bl	8000e18 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1f3      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	4b51      	ldr	r3, [pc, #324]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0xe8>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175e:	2b08      	cmp	r3, #8
 8001760:	d11c      	bne.n	800179c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001762:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x152>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1c7      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4937      	ldr	r1, [pc, #220]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e03a      	b.n	8001812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b34      	ldr	r3, [pc, #208]	; (8001878 <HAL_RCC_OscConfig+0x244>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb35 	bl	8000e18 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fb31 	bl	8000e18 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e1a8      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4925      	ldr	r1, [pc, #148]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x244>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb14 	bl	8000e18 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fb10 	bl	8000e18 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e187      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d036      	beq.n	800188c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d016      	beq.n	8001854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_RCC_OscConfig+0x248>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff faf4 	bl	8000e18 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff faf0 	bl	8000e18 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e167      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x200>
 8001852:	e01b      	b.n	800188c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_RCC_OscConfig+0x248>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff fadd 	bl	8000e18 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	e00e      	b.n	8001880 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff fad9 	bl	8000e18 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d907      	bls.n	8001880 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e150      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
 8001874:	40023800 	.word	0x40023800
 8001878:	42470000 	.word	0x42470000
 800187c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ea      	bne.n	8001862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 8097 	beq.w	80019c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189e:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10f      	bne.n	80018ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a7c      	ldr	r2, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x474>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <HAL_RCC_OscConfig+0x474>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a73      	ldr	r2, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x474>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fa99 	bl	8000e18 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7ff fa95 	bl	8000e18 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e10c      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x474>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x2ea>
 8001910:	4b64      	ldr	r3, [pc, #400]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a63      	ldr	r2, [pc, #396]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
 800191c:	e01c      	b.n	8001958 <HAL_RCC_OscConfig+0x324>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b05      	cmp	r3, #5
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x30c>
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a5e      	ldr	r2, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a5b      	ldr	r2, [pc, #364]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0x324>
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a57      	ldr	r2, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
 800194c:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a54      	ldr	r2, [pc, #336]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001952:	f023 0304 	bic.w	r3, r3, #4
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d015      	beq.n	800198c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff fa5a 	bl	8000e18 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	e00a      	b.n	800197e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff fa56 	bl	8000e18 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0cb      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ee      	beq.n	8001968 <HAL_RCC_OscConfig+0x334>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff fa44 	bl	8000e18 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001992:	e00a      	b.n	80019aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff fa40 	bl	8000e18 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0b5      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019aa:	4b3e      	ldr	r3, [pc, #248]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ee      	bne.n	8001994 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a38      	ldr	r2, [pc, #224]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80019c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80a1 	beq.w	8001b14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d05c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d141      	bne.n	8001a6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_RCC_OscConfig+0x478>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fa14 	bl	8000e18 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fa10 	bl	8000e18 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e087      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	019b      	lsls	r3, r3, #6
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	491b      	ldr	r1, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x478>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff f9e9 	bl	8000e18 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f9e5 	bl	8000e18 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e05c      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x416>
 8001a68:	e054      	b.n	8001b14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x478>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f9d2 	bl	8000e18 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff f9ce 	bl	8000e18 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e045      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x444>
 8001a96:	e03d      	b.n	8001b14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e038      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x4ec>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d028      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d121      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d11a      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d111      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	3b01      	subs	r3, #1
 8001afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0cc      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d90c      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0b8      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b90:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b50      	ldr	r3, [pc, #320]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	494d      	ldr	r1, [pc, #308]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d044      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d119      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e07f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be2:	4b3f      	ldr	r3, [pc, #252]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e067      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4934      	ldr	r1, [pc, #208]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c14:	f7ff f900 	bl	8000e18 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f8fc 	bl	8000e18 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e04f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d20c      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e032      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4916      	ldr	r1, [pc, #88]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	490e      	ldr	r1, [pc, #56]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001caa:	f000 f821 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	490a      	ldr	r1, [pc, #40]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	5ccb      	ldrb	r3, [r1, r3]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ff9e 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	08004a3c 	.word	0x08004a3c
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf4:	b094      	sub	sp, #80	; 0x50
 8001cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d00:	2300      	movs	r3, #0
 8001d02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d08:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d00d      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x40>
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	f200 80e1 	bhi.w	8001edc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x34>
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d22:	e0db      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d28:	e0db      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d2a:	4b73      	ldr	r3, [pc, #460]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d2e:	e0d8      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d30:	4b6f      	ldr	r3, [pc, #444]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d063      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d62:	4622      	mov	r2, r4
 8001d64:	462b      	mov	r3, r5
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	0159      	lsls	r1, r3, #5
 8001d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d74:	0150      	lsls	r0, r2, #5
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	1a51      	subs	r1, r2, r1
 8001d7e:	6139      	str	r1, [r7, #16]
 8001d80:	4629      	mov	r1, r5
 8001d82:	eb63 0301 	sbc.w	r3, r3, r1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d94:	4659      	mov	r1, fp
 8001d96:	018b      	lsls	r3, r1, #6
 8001d98:	4651      	mov	r1, sl
 8001d9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d9e:	4651      	mov	r1, sl
 8001da0:	018a      	lsls	r2, r1, #6
 8001da2:	4651      	mov	r1, sl
 8001da4:	ebb2 0801 	subs.w	r8, r2, r1
 8001da8:	4659      	mov	r1, fp
 8001daa:	eb63 0901 	sbc.w	r9, r3, r1
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dc2:	4690      	mov	r8, r2
 8001dc4:	4699      	mov	r9, r3
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	eb18 0303 	adds.w	r3, r8, r3
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	462b      	mov	r3, r5
 8001dd0:	eb49 0303 	adc.w	r3, r9, r3
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001de2:	4629      	mov	r1, r5
 8001de4:	024b      	lsls	r3, r1, #9
 8001de6:	4621      	mov	r1, r4
 8001de8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dec:	4621      	mov	r1, r4
 8001dee:	024a      	lsls	r2, r1, #9
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df6:	2200      	movs	r2, #0
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e00:	f7fe f9f6 	bl	80001f0 <__aeabi_uldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e0c:	e058      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	2200      	movs	r2, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	4611      	mov	r1, r2
 8001e1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	2300      	movs	r3, #0
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e28:	4642      	mov	r2, r8
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	f04f 0000 	mov.w	r0, #0
 8001e30:	f04f 0100 	mov.w	r1, #0
 8001e34:	0159      	lsls	r1, r3, #5
 8001e36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e3a:	0150      	lsls	r0, r2, #5
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4641      	mov	r1, r8
 8001e42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e46:	4649      	mov	r1, r9
 8001e48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e60:	ebb2 040a 	subs.w	r4, r2, sl
 8001e64:	eb63 050b 	sbc.w	r5, r3, fp
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	00eb      	lsls	r3, r5, #3
 8001e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e76:	00e2      	lsls	r2, r4, #3
 8001e78:	4614      	mov	r4, r2
 8001e7a:	461d      	mov	r5, r3
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	18e3      	adds	r3, r4, r3
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	464b      	mov	r3, r9
 8001e84:	eb45 0303 	adc.w	r3, r5, r3
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e96:	4629      	mov	r1, r5
 8001e98:	028b      	lsls	r3, r1, #10
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	028a      	lsls	r2, r1, #10
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	61fa      	str	r2, [r7, #28]
 8001eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eb4:	f7fe f99c 	bl	80001f0 <__aeabi_uldivmod>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ede:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3750      	adds	r7, #80	; 0x50
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	00f42400 	.word	0x00f42400
 8001ef8:	007a1200 	.word	0x007a1200

08001efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f18:	f7ff fff0 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0a9b      	lsrs	r3, r3, #10
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4903      	ldr	r1, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08004a4c 	.word	0x08004a4c

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f40:	f7ff ffdc 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0b5b      	lsrs	r3, r3, #13
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4903      	ldr	r1, [pc, #12]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08004a4c 	.word	0x08004a4c

08001f64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	220f      	movs	r2, #15
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_RCC_GetClockConfig+0x60>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e041      	b.n	800205e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f839 	bl	8002066 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3304      	adds	r3, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f000 f9d8 	bl	80023bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d001      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e04e      	b.n	8002132 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_TIM_Base_Start_IT+0xc4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d022      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020be:	d01d      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_TIM_Base_Start_IT+0xc8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_TIM_Base_Start_IT+0xcc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_TIM_Base_Start_IT+0xd0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_TIM_Base_Start_IT+0xd4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_TIM_Base_Start_IT+0xd8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x80>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_TIM_Base_Start_IT+0xdc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d111      	bne.n	8002120 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b06      	cmp	r3, #6
 800210c:	d010      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211e:	e007      	b.n	8002130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40010000 	.word	0x40010000
 8002144:	40000400 	.word	0x40000400
 8002148:	40000800 	.word	0x40000800
 800214c:	40000c00 	.word	0x40000c00
 8002150:	40010400 	.word	0x40010400
 8002154:	40014000 	.word	0x40014000
 8002158:	40001800 	.word	0x40001800

0800215c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b02      	cmp	r3, #2
 8002170:	d122      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b02      	cmp	r3, #2
 800217e:	d11b      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0202 	mvn.w	r2, #2
 8002188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8ee 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8e0 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f8f1 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d122      	bne.n	800220c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d11b      	bne.n	800220c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0204 	mvn.w	r2, #4
 80021dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8c4 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80021f8:	e005      	b.n	8002206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8b6 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f8c7 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b08      	cmp	r3, #8
 8002218:	d122      	bne.n	8002260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b08      	cmp	r3, #8
 8002226:	d11b      	bne.n	8002260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0208 	mvn.w	r2, #8
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2204      	movs	r2, #4
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f89a 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f88c 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f89d 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b10      	cmp	r3, #16
 800226c:	d122      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b10      	cmp	r3, #16
 800227a:	d11b      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0210 	mvn.w	r2, #16
 8002284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2208      	movs	r2, #8
 800228a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f870 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80022a0:	e005      	b.n	80022ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f862 	bl	800236c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f873 	bl	8002394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0201 	mvn.w	r2, #1
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fbb0 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b80      	cmp	r3, #128	; 0x80
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f8:	2b80      	cmp	r3, #128	; 0x80
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f902 	bl	8002510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b40      	cmp	r3, #64	; 0x40
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f838 	bl	80023a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b20      	cmp	r3, #32
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b20      	cmp	r3, #32
 8002352:	d107      	bne.n	8002364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0220 	mvn.w	r2, #32
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f8cc 	bl	80024fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <TIM_Base_SetConfig+0x114>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023da:	d00f      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3d      	ldr	r2, [pc, #244]	; (80024d4 <TIM_Base_SetConfig+0x118>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00b      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3c      	ldr	r2, [pc, #240]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3b      	ldr	r2, [pc, #236]	; (80024dc <TIM_Base_SetConfig+0x120>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d003      	beq.n	80023fc <TIM_Base_SetConfig+0x40>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3a      	ldr	r2, [pc, #232]	; (80024e0 <TIM_Base_SetConfig+0x124>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d108      	bne.n	800240e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <TIM_Base_SetConfig+0x114>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d02b      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d027      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <TIM_Base_SetConfig+0x118>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d023      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a2b      	ldr	r2, [pc, #172]	; (80024d8 <TIM_Base_SetConfig+0x11c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01f      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <TIM_Base_SetConfig+0x120>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01b      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a29      	ldr	r2, [pc, #164]	; (80024e0 <TIM_Base_SetConfig+0x124>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d017      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <TIM_Base_SetConfig+0x128>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <TIM_Base_SetConfig+0x12c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00f      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a26      	ldr	r2, [pc, #152]	; (80024ec <TIM_Base_SetConfig+0x130>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00b      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a25      	ldr	r2, [pc, #148]	; (80024f0 <TIM_Base_SetConfig+0x134>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a24      	ldr	r2, [pc, #144]	; (80024f4 <TIM_Base_SetConfig+0x138>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a23      	ldr	r2, [pc, #140]	; (80024f8 <TIM_Base_SetConfig+0x13c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d108      	bne.n	8002480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <TIM_Base_SetConfig+0x114>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d003      	beq.n	80024b4 <TIM_Base_SetConfig+0xf8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <TIM_Base_SetConfig+0x124>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d103      	bne.n	80024bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	615a      	str	r2, [r3, #20]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40000800 	.word	0x40000800
 80024dc:	40000c00 	.word	0x40000c00
 80024e0:	40010400 	.word	0x40010400
 80024e4:	40014000 	.word	0x40014000
 80024e8:	40014400 	.word	0x40014400
 80024ec:	40014800 	.word	0x40014800
 80024f0:	40001800 	.word	0x40001800
 80024f4:	40001c00 	.word	0x40001c00
 80024f8:	40002000 	.word	0x40002000

080024fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e03f      	b.n	80025b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe fabc 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	; 0x24
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f829 	bl	80025c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800257c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800258c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800259c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c4:	b0c0      	sub	sp, #256	; 0x100
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	68d9      	ldr	r1, [r3, #12]
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	ea40 0301 	orr.w	r3, r0, r1
 80025e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	431a      	orrs	r2, r3
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002618:	f021 010c 	bic.w	r1, r1, #12
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002626:	430b      	orrs	r3, r1
 8002628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800262a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263a:	6999      	ldr	r1, [r3, #24]
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	ea40 0301 	orr.w	r3, r0, r1
 8002646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b8f      	ldr	r3, [pc, #572]	; (800288c <UART_SetConfig+0x2cc>)
 8002650:	429a      	cmp	r2, r3
 8002652:	d005      	beq.n	8002660 <UART_SetConfig+0xa0>
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b8d      	ldr	r3, [pc, #564]	; (8002890 <UART_SetConfig+0x2d0>)
 800265c:	429a      	cmp	r2, r3
 800265e:	d104      	bne.n	800266a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002660:	f7ff fc6c 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8002664:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002668:	e003      	b.n	8002672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800266a:	f7ff fc53 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 800266e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267c:	f040 810c 	bne.w	8002898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002684:	2200      	movs	r2, #0
 8002686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800268a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800268e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	1891      	adds	r1, r2, r2
 8002698:	65b9      	str	r1, [r7, #88]	; 0x58
 800269a:	415b      	adcs	r3, r3
 800269c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800269e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026a2:	4621      	mov	r1, r4
 80026a4:	eb12 0801 	adds.w	r8, r2, r1
 80026a8:	4629      	mov	r1, r5
 80026aa:	eb43 0901 	adc.w	r9, r3, r1
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c2:	4690      	mov	r8, r2
 80026c4:	4699      	mov	r9, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	eb18 0303 	adds.w	r3, r8, r3
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026d0:	462b      	mov	r3, r5
 80026d2:	eb49 0303 	adc.w	r3, r9, r3
 80026d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026ee:	460b      	mov	r3, r1
 80026f0:	18db      	adds	r3, r3, r3
 80026f2:	653b      	str	r3, [r7, #80]	; 0x50
 80026f4:	4613      	mov	r3, r2
 80026f6:	eb42 0303 	adc.w	r3, r2, r3
 80026fa:	657b      	str	r3, [r7, #84]	; 0x54
 80026fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002704:	f7fd fd74 	bl	80001f0 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4b61      	ldr	r3, [pc, #388]	; (8002894 <UART_SetConfig+0x2d4>)
 800270e:	fba3 2302 	umull	r2, r3, r3, r2
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	011c      	lsls	r4, r3, #4
 8002716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002720:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	1891      	adds	r1, r2, r2
 800272e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002730:	415b      	adcs	r3, r3
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002738:	4641      	mov	r1, r8
 800273a:	eb12 0a01 	adds.w	sl, r2, r1
 800273e:	4649      	mov	r1, r9
 8002740:	eb43 0b01 	adc.w	fp, r3, r1
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002758:	4692      	mov	sl, r2
 800275a:	469b      	mov	fp, r3
 800275c:	4643      	mov	r3, r8
 800275e:	eb1a 0303 	adds.w	r3, sl, r3
 8002762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002766:	464b      	mov	r3, r9
 8002768:	eb4b 0303 	adc.w	r3, fp, r3
 800276c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800277c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002784:	460b      	mov	r3, r1
 8002786:	18db      	adds	r3, r3, r3
 8002788:	643b      	str	r3, [r7, #64]	; 0x40
 800278a:	4613      	mov	r3, r2
 800278c:	eb42 0303 	adc.w	r3, r2, r3
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
 8002792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800279a:	f7fd fd29 	bl	80001f0 <__aeabi_uldivmod>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <UART_SetConfig+0x2d4>)
 80027a6:	fba3 2301 	umull	r2, r3, r3, r1
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2264      	movs	r2, #100	; 0x64
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	1acb      	subs	r3, r1, r3
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <UART_SetConfig+0x2d4>)
 80027bc:	fba3 2302 	umull	r2, r3, r3, r2
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027c8:	441c      	add	r4, r3
 80027ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027dc:	4642      	mov	r2, r8
 80027de:	464b      	mov	r3, r9
 80027e0:	1891      	adds	r1, r2, r2
 80027e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027e4:	415b      	adcs	r3, r3
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027ec:	4641      	mov	r1, r8
 80027ee:	1851      	adds	r1, r2, r1
 80027f0:	6339      	str	r1, [r7, #48]	; 0x30
 80027f2:	4649      	mov	r1, r9
 80027f4:	414b      	adcs	r3, r1
 80027f6:	637b      	str	r3, [r7, #52]	; 0x34
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002804:	4659      	mov	r1, fp
 8002806:	00cb      	lsls	r3, r1, #3
 8002808:	4651      	mov	r1, sl
 800280a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280e:	4651      	mov	r1, sl
 8002810:	00ca      	lsls	r2, r1, #3
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	4603      	mov	r3, r0
 8002818:	4642      	mov	r2, r8
 800281a:	189b      	adds	r3, r3, r2
 800281c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002820:	464b      	mov	r3, r9
 8002822:	460a      	mov	r2, r1
 8002824:	eb42 0303 	adc.w	r3, r2, r3
 8002828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002838:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800283c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002840:	460b      	mov	r3, r1
 8002842:	18db      	adds	r3, r3, r3
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	4613      	mov	r3, r2
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002856:	f7fd fccb 	bl	80001f0 <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <UART_SetConfig+0x2d4>)
 8002860:	fba3 1302 	umull	r1, r3, r3, r2
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	2164      	movs	r1, #100	; 0x64
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	3332      	adds	r3, #50	; 0x32
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <UART_SetConfig+0x2d4>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	f003 0207 	and.w	r2, r3, #7
 800287e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4422      	add	r2, r4
 8002886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002888:	e105      	b.n	8002a96 <UART_SetConfig+0x4d6>
 800288a:	bf00      	nop
 800288c:	40011000 	.word	0x40011000
 8002890:	40011400 	.word	0x40011400
 8002894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289c:	2200      	movs	r2, #0
 800289e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028aa:	4642      	mov	r2, r8
 80028ac:	464b      	mov	r3, r9
 80028ae:	1891      	adds	r1, r2, r2
 80028b0:	6239      	str	r1, [r7, #32]
 80028b2:	415b      	adcs	r3, r3
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028ba:	4641      	mov	r1, r8
 80028bc:	1854      	adds	r4, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb43 0501 	adc.w	r5, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	00eb      	lsls	r3, r5, #3
 80028ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d2:	00e2      	lsls	r2, r4, #3
 80028d4:	4614      	mov	r4, r2
 80028d6:	461d      	mov	r5, r3
 80028d8:	4643      	mov	r3, r8
 80028da:	18e3      	adds	r3, r4, r3
 80028dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028e0:	464b      	mov	r3, r9
 80028e2:	eb45 0303 	adc.w	r3, r5, r3
 80028e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002906:	4629      	mov	r1, r5
 8002908:	008b      	lsls	r3, r1, #2
 800290a:	4621      	mov	r1, r4
 800290c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002910:	4621      	mov	r1, r4
 8002912:	008a      	lsls	r2, r1, #2
 8002914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002918:	f7fd fc6a 	bl	80001f0 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <UART_SetConfig+0x4e4>)
 8002922:	fba3 2302 	umull	r2, r3, r3, r2
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	011c      	lsls	r4, r3, #4
 800292a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800292e:	2200      	movs	r2, #0
 8002930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002934:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800293c:	4642      	mov	r2, r8
 800293e:	464b      	mov	r3, r9
 8002940:	1891      	adds	r1, r2, r2
 8002942:	61b9      	str	r1, [r7, #24]
 8002944:	415b      	adcs	r3, r3
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800294c:	4641      	mov	r1, r8
 800294e:	1851      	adds	r1, r2, r1
 8002950:	6139      	str	r1, [r7, #16]
 8002952:	4649      	mov	r1, r9
 8002954:	414b      	adcs	r3, r1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002964:	4659      	mov	r1, fp
 8002966:	00cb      	lsls	r3, r1, #3
 8002968:	4651      	mov	r1, sl
 800296a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800296e:	4651      	mov	r1, sl
 8002970:	00ca      	lsls	r2, r1, #3
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	4603      	mov	r3, r0
 8002978:	4642      	mov	r2, r8
 800297a:	189b      	adds	r3, r3, r2
 800297c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002980:	464b      	mov	r3, r9
 8002982:	460a      	mov	r2, r1
 8002984:	eb42 0303 	adc.w	r3, r2, r3
 8002988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	67bb      	str	r3, [r7, #120]	; 0x78
 8002996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029a4:	4649      	mov	r1, r9
 80029a6:	008b      	lsls	r3, r1, #2
 80029a8:	4641      	mov	r1, r8
 80029aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ae:	4641      	mov	r1, r8
 80029b0:	008a      	lsls	r2, r1, #2
 80029b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029b6:	f7fd fc1b 	bl	80001f0 <__aeabi_uldivmod>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <UART_SetConfig+0x4e4>)
 80029c0:	fba3 1302 	umull	r1, r3, r3, r2
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	2164      	movs	r1, #100	; 0x64
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	3332      	adds	r3, #50	; 0x32
 80029d2:	4a34      	ldr	r2, [pc, #208]	; (8002aa4 <UART_SetConfig+0x4e4>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029de:	441c      	add	r4, r3
 80029e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e4:	2200      	movs	r2, #0
 80029e6:	673b      	str	r3, [r7, #112]	; 0x70
 80029e8:	677a      	str	r2, [r7, #116]	; 0x74
 80029ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029ee:	4642      	mov	r2, r8
 80029f0:	464b      	mov	r3, r9
 80029f2:	1891      	adds	r1, r2, r2
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	415b      	adcs	r3, r3
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029fe:	4641      	mov	r1, r8
 8002a00:	1851      	adds	r1, r2, r1
 8002a02:	6039      	str	r1, [r7, #0]
 8002a04:	4649      	mov	r1, r9
 8002a06:	414b      	adcs	r3, r1
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a16:	4659      	mov	r1, fp
 8002a18:	00cb      	lsls	r3, r1, #3
 8002a1a:	4651      	mov	r1, sl
 8002a1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a20:	4651      	mov	r1, sl
 8002a22:	00ca      	lsls	r2, r1, #3
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4642      	mov	r2, r8
 8002a2c:	189b      	adds	r3, r3, r2
 8002a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a30:	464b      	mov	r3, r9
 8002a32:	460a      	mov	r2, r1
 8002a34:	eb42 0303 	adc.w	r3, r2, r3
 8002a38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	663b      	str	r3, [r7, #96]	; 0x60
 8002a44:	667a      	str	r2, [r7, #100]	; 0x64
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a52:	4649      	mov	r1, r9
 8002a54:	008b      	lsls	r3, r1, #2
 8002a56:	4641      	mov	r1, r8
 8002a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	008a      	lsls	r2, r1, #2
 8002a60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a64:	f7fd fbc4 	bl	80001f0 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <UART_SetConfig+0x4e4>)
 8002a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2164      	movs	r1, #100	; 0x64
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	3332      	adds	r3, #50	; 0x32
 8002a80:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <UART_SetConfig+0x4e4>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4422      	add	r2, r4
 8002a94:	609a      	str	r2, [r3, #8]
}
 8002a96:	bf00      	nop
 8002a98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa2:	bf00      	nop
 8002aa4:	51eb851f 	.word	0x51eb851f

08002aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	f107 001c 	add.w	r0, r7, #28
 8002ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d122      	bne.n	8002b06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d105      	bne.n	8002afa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 faa2 	bl	8003044 <USB_CoreReset>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e01a      	b.n	8002b3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa96 	bl	8003044 <USB_CoreReset>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b2e:	e005      	b.n	8002b3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d10b      	bne.n	8002b5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f043 0206 	orr.w	r2, r3, #6
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b66:	b004      	add	sp, #16
 8002b68:	4770      	bx	lr

08002b6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0201 	bic.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d115      	bne.n	8002bda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f7fe f938 	bl	8000e30 <HAL_Delay>
      ms++;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa2e 	bl	8003028 <USB_GetMode>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d01e      	beq.n	8002c10 <USB_SetCurrentMode+0x84>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b31      	cmp	r3, #49	; 0x31
 8002bd6:	d9f0      	bls.n	8002bba <USB_SetCurrentMode+0x2e>
 8002bd8:	e01a      	b.n	8002c10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d115      	bne.n	8002c0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7fe f91f 	bl	8000e30 <HAL_Delay>
      ms++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa15 	bl	8003028 <USB_GetMode>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <USB_SetCurrentMode+0x84>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b31      	cmp	r3, #49	; 0x31
 8002c08:	d9f0      	bls.n	8002bec <USB_SetCurrentMode+0x60>
 8002c0a:	e001      	b.n	8002c10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e005      	b.n	8002c1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b32      	cmp	r3, #50	; 0x32
 8002c14:	d101      	bne.n	8002c1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c24:	b084      	sub	sp, #16
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	e009      	b.n	8002c58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	3340      	adds	r3, #64	; 0x40
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	2200      	movs	r2, #0
 8002c50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	3301      	adds	r3, #1
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b0e      	cmp	r3, #14
 8002c5c:	d9f2      	bls.n	8002c44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11c      	bne.n	8002c9e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c9c:	e00b      	b.n	8002cb6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc8:	4619      	mov	r1, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	680b      	ldr	r3, [r1, #0]
 8002cd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d10c      	bne.n	8002cf6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d104      	bne.n	8002cec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f965 	bl	8002fb4 <USB_SetDevSpeed>
 8002cea:	e008      	b.n	8002cfe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002cec:	2101      	movs	r1, #1
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f960 	bl	8002fb4 <USB_SetDevSpeed>
 8002cf4:	e003      	b.n	8002cfe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002cf6:	2103      	movs	r1, #3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f95b 	bl	8002fb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002cfe:	2110      	movs	r1, #16
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f8f3 	bl	8002eec <USB_FlushTxFifo>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f91f 	bl	8002f54 <USB_FlushRxFifo>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d26:	461a      	mov	r2, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	461a      	mov	r2, r3
 8002d34:	2300      	movs	r3, #0
 8002d36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2300      	movs	r3, #0
 8002d42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	e043      	b.n	8002dd2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d60:	d118      	bne.n	8002d94 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d74:	461a      	mov	r2, r3
 8002d76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e013      	b.n	8002da6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e008      	b.n	8002da6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da0:	461a      	mov	r2, r3
 8002da2:	2300      	movs	r3, #0
 8002da4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db2:	461a      	mov	r2, r3
 8002db4:	2300      	movs	r3, #0
 8002db6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3b7      	bcc.n	8002d4a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	e043      	b.n	8002e68 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002df6:	d118      	bne.n	8002e2a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e013      	b.n	8002e3c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e20:	461a      	mov	r2, r3
 8002e22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	e008      	b.n	8002e3c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	2300      	movs	r3, #0
 8002e3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	3301      	adds	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d3b7      	bcc.n	8002de0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002e90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f043 0210 	orr.w	r2, r3, #16
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <USB_DevInit+0x2c4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f043 0208 	orr.w	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ee4:	b004      	add	sp, #16
 8002ee6:	4770      	bx	lr
 8002ee8:	803c3800 	.word	0x803c3800

08002eec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <USB_FlushTxFifo+0x64>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d901      	bls.n	8002f0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e01b      	b.n	8002f44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	daf2      	bge.n	8002efa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <USB_FlushTxFifo+0x64>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d901      	bls.n	8002f36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e006      	b.n	8002f44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d0f0      	beq.n	8002f24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	00030d40 	.word	0x00030d40

08002f54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3301      	adds	r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <USB_FlushRxFifo+0x5c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e018      	b.n	8002fa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	daf2      	bge.n	8002f60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2210      	movs	r2, #16
 8002f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <USB_FlushRxFifo+0x5c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e006      	b.n	8002fa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d0f0      	beq.n	8002f84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	00030d40 	.word	0x00030d40

08002fb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003000:	f023 0303 	bic.w	r3, r3, #3
 8003004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0301 	and.w	r3, r3, #1
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3301      	adds	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <USB_CoreReset+0x64>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e01b      	b.n	800309a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	daf2      	bge.n	8003050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3301      	adds	r3, #1
 800307e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <USB_CoreReset+0x64>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e006      	b.n	800309a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d0f0      	beq.n	800307a <USB_CoreReset+0x36>

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	00030d40 	.word	0x00030d40

080030ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030be:	2b84      	cmp	r3, #132	; 0x84
 80030c0:	d005      	beq.n	80030ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	3303      	adds	r3, #3
 80030cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030ce:	68fb      	ldr	r3, [r7, #12]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030e2:	f3ef 8305 	mrs	r3, IPSR
 80030e6:	607b      	str	r3, [r7, #4]
  return(result);
 80030e8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003104:	f000 fca2 	bl	8003a4c <vTaskStartScheduler>
  
  return osOK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	bd80      	pop	{r7, pc}

0800310e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800310e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003110:	b089      	sub	sp, #36	; 0x24
 8003112:	af04      	add	r7, sp, #16
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <osThreadCreate+0x54>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01c      	beq.n	8003162 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685c      	ldr	r4, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681d      	ldr	r5, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691e      	ldr	r6, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffb6 	bl	80030ac <makeFreeRtosPriority>
 8003140:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800314a:	9202      	str	r2, [sp, #8]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	9100      	str	r1, [sp, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4632      	mov	r2, r6
 8003154:	4629      	mov	r1, r5
 8003156:	4620      	mov	r0, r4
 8003158:	f000 f91c 	bl	8003394 <xTaskCreateStatic>
 800315c:	4603      	mov	r3, r0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e01c      	b.n	800319c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685c      	ldr	r4, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800316e:	b29e      	uxth	r6, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff ff98 	bl	80030ac <makeFreeRtosPriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	9200      	str	r2, [sp, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	4632      	mov	r2, r6
 800318a:	4629      	mov	r1, r5
 800318c:	4620      	mov	r0, r4
 800318e:	f000 f95e 	bl	800344e <xTaskCreate>
 8003192:	4603      	mov	r3, r0
 8003194:	2b01      	cmp	r3, #1
 8003196:	d001      	beq.n	800319c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800319c:	68fb      	ldr	r3, [r7, #12]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <osDelay+0x16>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	e000      	b.n	80031be <osDelay+0x18>
 80031bc:	2301      	movs	r3, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fa7c 	bl	80036bc <vTaskDelay>
  
  return osOK;
 80031c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 faa4 	bl	8003724 <vTaskSuspend>
  
  return osOK;
 80031dc:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80031f0:	f7ff ff74 	bl	80030dc <inHandlerMode>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fbb4 	bl	8003968 <xTaskResumeFromISR>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d10b      	bne.n	800321e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <osThreadResume+0x40>)
 8003208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	e002      	b.n	800321e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fb47 	bl	80038ac <vTaskResume>
  }
  return osOK;
 800321e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f103 0208 	add.w	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f103 0208 	add.w	r2, r3, #8
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f103 0208 	add.w	r2, r3, #8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d103      	bne.n	80032ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e00c      	b.n	8003308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3308      	adds	r3, #8
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	e002      	b.n	80032fc <vListInsert+0x2e>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	d2f6      	bcs.n	80032f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6892      	ldr	r2, [r2, #8]
 8003356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6852      	ldr	r2, [r2, #4]
 8003360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d103      	bne.n	8003374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1e5a      	subs	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08e      	sub	sp, #56	; 0x38
 8003398:	af04      	add	r7, sp, #16
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <xTaskCreateStatic+0x46>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	61fb      	str	r3, [r7, #28]
}
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033da:	2354      	movs	r3, #84	; 0x54
 80033dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b54      	cmp	r3, #84	; 0x54
 80033e2:	d00a      	beq.n	80033fa <xTaskCreateStatic+0x66>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	61bb      	str	r3, [r7, #24]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01e      	beq.n	8003440 <xTaskCreateStatic+0xac>
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01b      	beq.n	8003440 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003410:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800341a:	2300      	movs	r3, #0
 800341c:	9303      	str	r3, [sp, #12]
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	9302      	str	r3, [sp, #8]
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f850 	bl	80034d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800343a:	f000 f8d5 	bl	80035e8 <prvAddNewTaskToReadyList>
 800343e:	e001      	b.n	8003444 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003444:	697b      	ldr	r3, [r7, #20]
	}
 8003446:	4618      	mov	r0, r3
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08c      	sub	sp, #48	; 0x30
 8003452:	af04      	add	r7, sp, #16
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4618      	mov	r0, r3
 8003464:	f001 f8a0 	bl	80045a8 <pvPortMalloc>
 8003468:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003470:	2054      	movs	r0, #84	; 0x54
 8003472:	f001 f899 	bl	80045a8 <pvPortMalloc>
 8003476:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
 8003484:	e005      	b.n	8003492 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f001 f95a 	bl	8004740 <vPortFree>
 800348c:	e001      	b.n	8003492 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d017      	beq.n	80034c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	2300      	movs	r3, #0
 80034a4:	9303      	str	r3, [sp, #12]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	9302      	str	r3, [sp, #8]
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f80e 	bl	80034d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034bc:	69f8      	ldr	r0, [r7, #28]
 80034be:	f000 f893 	bl	80035e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e002      	b.n	80034ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034ce:	69bb      	ldr	r3, [r7, #24]
	}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034f0:	3b01      	subs	r3, #1
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <prvInitialiseNewTask+0x48>
	__asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	617b      	str	r3, [r7, #20]
}
 800351c:	bf00      	nop
 800351e:	e7fe      	b.n	800351e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01f      	beq.n	8003566 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e012      	b.n	8003552 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	7819      	ldrb	r1, [r3, #0]
 8003534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	3334      	adds	r3, #52	; 0x34
 800353c:	460a      	mov	r2, r1
 800353e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d006      	beq.n	800355a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b0f      	cmp	r3, #15
 8003556:	d9e9      	bls.n	800352c <prvInitialiseNewTask+0x54>
 8003558:	e000      	b.n	800355c <prvInitialiseNewTask+0x84>
			{
				break;
 800355a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003564:	e003      	b.n	800356e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	2b06      	cmp	r3, #6
 8003572:	d901      	bls.n	8003578 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003574:	2306      	movs	r3, #6
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800357c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2200      	movs	r2, #0
 8003588:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fe6c 	bl	800326c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	3318      	adds	r3, #24
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fe67 	bl	800326c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	f1c3 0207 	rsb	r2, r3, #7
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	2200      	movs	r2, #0
 80035b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	68f9      	ldr	r1, [r7, #12]
 80035c6:	69b8      	ldr	r0, [r7, #24]
 80035c8:	f000 fd9c 	bl	8004104 <pxPortInitialiseStack>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035de:	bf00      	nop
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035f0:	f000 feb8 	bl	8004364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035f4:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <prvAddNewTaskToReadyList+0xb8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <prvAddNewTaskToReadyList+0xb8>)
 80035fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <prvAddNewTaskToReadyList+0xbc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003606:	4a27      	ldr	r2, [pc, #156]	; (80036a4 <prvAddNewTaskToReadyList+0xbc>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <prvAddNewTaskToReadyList+0xb8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d110      	bne.n	8003636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003614:	f000 fc52 	bl	8003ebc <prvInitialiseTaskLists>
 8003618:	e00d      	b.n	8003636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <prvAddNewTaskToReadyList+0xc0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <prvAddNewTaskToReadyList+0xbc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	429a      	cmp	r2, r3
 800362e:	d802      	bhi.n	8003636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003630:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <prvAddNewTaskToReadyList+0xbc>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <prvAddNewTaskToReadyList+0xc4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <prvAddNewTaskToReadyList+0xc4>)
 800363e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	2201      	movs	r2, #1
 8003646:	409a      	lsls	r2, r3
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <prvAddNewTaskToReadyList+0xc8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <prvAddNewTaskToReadyList+0xc8>)
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <prvAddNewTaskToReadyList+0xcc>)
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7ff fe0c 	bl	8003286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800366e:	f000 fea9 	bl	80043c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <prvAddNewTaskToReadyList+0xc0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <prvAddNewTaskToReadyList+0xbc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	429a      	cmp	r2, r3
 8003686:	d207      	bcs.n	8003698 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <prvAddNewTaskToReadyList+0xd0>)
 800368a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000928 	.word	0x20000928
 80036a4:	20000828 	.word	0x20000828
 80036a8:	20000934 	.word	0x20000934
 80036ac:	20000944 	.word	0x20000944
 80036b0:	20000930 	.word	0x20000930
 80036b4:	2000082c 	.word	0x2000082c
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d017      	beq.n	80036fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <vTaskDelay+0x60>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <vTaskDelay+0x30>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60bb      	str	r3, [r7, #8]
}
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036ec:	f000 fa0e 	bl	8003b0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036f0:	2100      	movs	r1, #0
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fca0 	bl	8004038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036f8:	f000 fa16 	bl	8003b28 <xTaskResumeAll>
 80036fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <vTaskDelay+0x64>)
 8003706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000950 	.word	0x20000950
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800372c:	f000 fe1a 	bl	8004364 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <vTaskSuspend+0x18>
 8003736:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <vTaskSuspend+0x104>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e000      	b.n	800373e <vTaskSuspend+0x1a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3304      	adds	r3, #4
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fdfb 	bl	8003340 <uxListRemove>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d115      	bne.n	800377c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	4935      	ldr	r1, [pc, #212]	; (800382c <vTaskSuspend+0x108>)
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <vTaskSuspend+0x58>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	2201      	movs	r2, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43da      	mvns	r2, r3
 8003772:	4b2f      	ldr	r3, [pc, #188]	; (8003830 <vTaskSuspend+0x10c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4013      	ands	r3, r2
 8003778:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <vTaskSuspend+0x10c>)
 800377a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d004      	beq.n	800378e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3318      	adds	r3, #24
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fdd9 	bl	8003340 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3304      	adds	r3, #4
 8003792:	4619      	mov	r1, r3
 8003794:	4827      	ldr	r0, [pc, #156]	; (8003834 <vTaskSuspend+0x110>)
 8003796:	f7ff fd76 	bl	8003286 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d103      	bne.n	80037ae <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80037ae:	f000 fe09 	bl	80043c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80037b2:	4b21      	ldr	r3, [pc, #132]	; (8003838 <vTaskSuspend+0x114>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80037ba:	f000 fdd3 	bl	8004364 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80037be:	f000 fc1b 	bl	8003ff8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80037c2:	f000 fdff 	bl	80043c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <vTaskSuspend+0x104>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d127      	bne.n	8003820 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <vTaskSuspend+0x114>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d017      	beq.n	8003808 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80037d8:	4b18      	ldr	r3, [pc, #96]	; (800383c <vTaskSuspend+0x118>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <vTaskSuspend+0xd2>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	60bb      	str	r3, [r7, #8]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <vTaskSuspend+0x11c>)
 80037f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003806:	e00b      	b.n	8003820 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <vTaskSuspend+0x110>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <vTaskSuspend+0x120>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d103      	bne.n	800381c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <vTaskSuspend+0x104>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
	}
 800381a:	e001      	b.n	8003820 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800381c:	f000 fad8 	bl	8003dd0 <vTaskSwitchContext>
	}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20000828 	.word	0x20000828
 800382c:	2000082c 	.word	0x2000082c
 8003830:	20000930 	.word	0x20000930
 8003834:	20000914 	.word	0x20000914
 8003838:	20000934 	.word	0x20000934
 800383c:	20000950 	.word	0x20000950
 8003840:	e000ed04 	.word	0xe000ed04
 8003844:	20000928 	.word	0x20000928

08003848 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60fb      	str	r3, [r7, #12]
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <prvTaskIsTaskSuspended+0x5c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d10a      	bne.n	8003894 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <prvTaskIsTaskSuspended+0x60>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d005      	beq.n	8003894 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003894:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003896:	4618      	mov	r0, r3
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000914 	.word	0x20000914
 80038a8:	200008e8 	.word	0x200008e8

080038ac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <vTaskResume+0x28>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60bb      	str	r3, [r7, #8]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80038d4:	4b20      	ldr	r3, [pc, #128]	; (8003958 <vTaskResume+0xac>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d037      	beq.n	800394e <vTaskResume+0xa2>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d034      	beq.n	800394e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80038e4:	f000 fd3e 	bl	8004364 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff ffad 	bl	8003848 <prvTaskIsTaskSuspended>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02a      	beq.n	800394a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fd21 	bl	8003340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	2201      	movs	r2, #1
 8003904:	409a      	lsls	r2, r3
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <vTaskResume+0xb0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	4a13      	ldr	r2, [pc, #76]	; (800395c <vTaskResume+0xb0>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a10      	ldr	r2, [pc, #64]	; (8003960 <vTaskResume+0xb4>)
 800391e:	441a      	add	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7ff fcad 	bl	8003286 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <vTaskResume+0xac>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	429a      	cmp	r2, r3
 8003938:	d307      	bcc.n	800394a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <vTaskResume+0xb8>)
 800393c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800394a:	f000 fd3b 	bl	80043c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000828 	.word	0x20000828
 800395c:	20000930 	.word	0x20000930
 8003960:	2000082c 	.word	0x2000082c
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	61bb      	str	r3, [r7, #24]
}
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003994:	f000 fdc8 	bl	8004528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003998:	f3ef 8211 	mrs	r2, BASEPRI
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	617a      	str	r2, [r7, #20]
 80039ae:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039b0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039b2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80039b4:	6a38      	ldr	r0, [r7, #32]
 80039b6:	f7ff ff47 	bl	8003848 <prvTaskIsTaskSuspended>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02f      	beq.n	8003a20 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <xTaskResumeFromISR+0xd0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d125      	bne.n	8003a14 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <xTaskResumeFromISR+0xd4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d301      	bcc.n	80039da <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	3304      	adds	r3, #4
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fcae 	bl	8003340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	2201      	movs	r2, #1
 80039ea:	409a      	lsls	r2, r3
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <xTaskResumeFromISR+0xd8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <xTaskResumeFromISR+0xd8>)
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <xTaskResumeFromISR+0xdc>)
 8003a04:	441a      	add	r2, r3
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7ff fc3a 	bl	8003286 <vListInsertEnd>
 8003a12:	e005      	b.n	8003a20 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	3318      	adds	r3, #24
 8003a18:	4619      	mov	r1, r3
 8003a1a:	480b      	ldr	r0, [pc, #44]	; (8003a48 <xTaskResumeFromISR+0xe0>)
 8003a1c:	f7ff fc33 	bl	8003286 <vListInsertEnd>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a2a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3728      	adds	r7, #40	; 0x28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000950 	.word	0x20000950
 8003a3c:	20000828 	.word	0x20000828
 8003a40:	20000930 	.word	0x20000930
 8003a44:	2000082c 	.word	0x2000082c
 8003a48:	200008e8 	.word	0x200008e8

08003a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	1d39      	adds	r1, r7, #4
 8003a5e:	f107 0308 	add.w	r3, r7, #8
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fc fd46 	bl	80004f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	9202      	str	r2, [sp, #8]
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	460a      	mov	r2, r1
 8003a7a:	491e      	ldr	r1, [pc, #120]	; (8003af4 <vTaskStartScheduler+0xa8>)
 8003a7c:	481e      	ldr	r0, [pc, #120]	; (8003af8 <vTaskStartScheduler+0xac>)
 8003a7e:	f7ff fc89 	bl	8003394 <xTaskCreateStatic>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <vTaskStartScheduler+0xb0>)
 8003a86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a88:	4b1c      	ldr	r3, [pc, #112]	; (8003afc <vTaskStartScheduler+0xb0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e001      	b.n	8003a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d116      	bne.n	8003ace <vTaskStartScheduler+0x82>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	613b      	str	r3, [r7, #16]
}
 8003ab2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <vTaskStartScheduler+0xb4>)
 8003ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <vTaskStartScheduler+0xb8>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <vTaskStartScheduler+0xbc>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ac8:	f000 fbaa 	bl	8004220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003acc:	e00e      	b.n	8003aec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d10a      	bne.n	8003aec <vTaskStartScheduler+0xa0>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	60fb      	str	r3, [r7, #12]
}
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <vTaskStartScheduler+0x9e>
}
 8003aec:	bf00      	nop
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	08004a34 	.word	0x08004a34
 8003af8:	08003e89 	.word	0x08003e89
 8003afc:	2000094c 	.word	0x2000094c
 8003b00:	20000948 	.word	0x20000948
 8003b04:	20000934 	.word	0x20000934
 8003b08:	2000092c 	.word	0x2000092c

08003b0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <vTaskSuspendAll+0x18>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <vTaskSuspendAll+0x18>)
 8003b18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b1a:	bf00      	nop
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	20000950 	.word	0x20000950

08003b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b36:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <xTaskResumeAll+0x114>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	603b      	str	r3, [r7, #0]
}
 8003b50:	bf00      	nop
 8003b52:	e7fe      	b.n	8003b52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b54:	f000 fc06 	bl	8004364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b58:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <xTaskResumeAll+0x114>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	4a37      	ldr	r2, [pc, #220]	; (8003c3c <xTaskResumeAll+0x114>)
 8003b60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b62:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <xTaskResumeAll+0x114>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d161      	bne.n	8003c2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b6a:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <xTaskResumeAll+0x118>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d05d      	beq.n	8003c2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b72:	e02e      	b.n	8003bd2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b74:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <xTaskResumeAll+0x11c>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3318      	adds	r3, #24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fbdd 	bl	8003340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fbd8 	bl	8003340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	2201      	movs	r2, #1
 8003b96:	409a      	lsls	r2, r3
 8003b98:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <xTaskResumeAll+0x120>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	4a2a      	ldr	r2, [pc, #168]	; (8003c48 <xTaskResumeAll+0x120>)
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <xTaskResumeAll+0x124>)
 8003bb0:	441a      	add	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f7ff fb64 	bl	8003286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc2:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <xTaskResumeAll+0x128>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d302      	bcc.n	8003bd2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003bcc:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <xTaskResumeAll+0x12c>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <xTaskResumeAll+0x11c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1cc      	bne.n	8003b74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003be0:	f000 fa0a 	bl	8003ff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003be4:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <xTaskResumeAll+0x130>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bf0:	f000 f836 	bl	8003c60 <xTaskIncrementTick>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <xTaskResumeAll+0x12c>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f1      	bne.n	8003bf0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <xTaskResumeAll+0x130>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <xTaskResumeAll+0x12c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <xTaskResumeAll+0x134>)
 8003c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c2e:	f000 fbc9 	bl	80043c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003c32:	68bb      	ldr	r3, [r7, #8]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000950 	.word	0x20000950
 8003c40:	20000928 	.word	0x20000928
 8003c44:	200008e8 	.word	0x200008e8
 8003c48:	20000930 	.word	0x20000930
 8003c4c:	2000082c 	.word	0x2000082c
 8003c50:	20000828 	.word	0x20000828
 8003c54:	2000093c 	.word	0x2000093c
 8003c58:	20000938 	.word	0x20000938
 8003c5c:	e000ed04 	.word	0xe000ed04

08003c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6a:	4b4e      	ldr	r3, [pc, #312]	; (8003da4 <xTaskIncrementTick+0x144>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 808e 	bne.w	8003d90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c74:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <xTaskIncrementTick+0x148>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c7c:	4a4a      	ldr	r2, [pc, #296]	; (8003da8 <xTaskIncrementTick+0x148>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d120      	bne.n	8003cca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c88:	4b48      	ldr	r3, [pc, #288]	; (8003dac <xTaskIncrementTick+0x14c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	603b      	str	r3, [r7, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <xTaskIncrementTick+0x46>
 8003ca8:	4b40      	ldr	r3, [pc, #256]	; (8003dac <xTaskIncrementTick+0x14c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b40      	ldr	r3, [pc, #256]	; (8003db0 <xTaskIncrementTick+0x150>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a3e      	ldr	r2, [pc, #248]	; (8003dac <xTaskIncrementTick+0x14c>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4a3e      	ldr	r2, [pc, #248]	; (8003db0 <xTaskIncrementTick+0x150>)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <xTaskIncrementTick+0x154>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	4a3c      	ldr	r2, [pc, #240]	; (8003db4 <xTaskIncrementTick+0x154>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	f000 f997 	bl	8003ff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <xTaskIncrementTick+0x158>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d348      	bcc.n	8003d66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd4:	4b35      	ldr	r3, [pc, #212]	; (8003dac <xTaskIncrementTick+0x14c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <xTaskIncrementTick+0x158>)
 8003ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce4:	601a      	str	r2, [r3, #0]
					break;
 8003ce6:	e03e      	b.n	8003d66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce8:	4b30      	ldr	r3, [pc, #192]	; (8003dac <xTaskIncrementTick+0x14c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d203      	bcs.n	8003d08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d00:	4a2d      	ldr	r2, [pc, #180]	; (8003db8 <xTaskIncrementTick+0x158>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d06:	e02e      	b.n	8003d66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fb17 	bl	8003340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	3318      	adds	r3, #24
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fb0e 	bl	8003340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	2201      	movs	r2, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <xTaskIncrementTick+0x15c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <xTaskIncrementTick+0x15c>)
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <xTaskIncrementTick+0x160>)
 8003d44:	441a      	add	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f7ff fa9a 	bl	8003286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <xTaskIncrementTick+0x164>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3b9      	bcc.n	8003cd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d64:	e7b6      	b.n	8003cd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d66:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <xTaskIncrementTick+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	4914      	ldr	r1, [pc, #80]	; (8003dc0 <xTaskIncrementTick+0x160>)
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d901      	bls.n	8003d82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <xTaskIncrementTick+0x168>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e004      	b.n	8003d9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <xTaskIncrementTick+0x16c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <xTaskIncrementTick+0x16c>)
 8003d98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d9a:	697b      	ldr	r3, [r7, #20]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000950 	.word	0x20000950
 8003da8:	2000092c 	.word	0x2000092c
 8003dac:	200008e0 	.word	0x200008e0
 8003db0:	200008e4 	.word	0x200008e4
 8003db4:	20000940 	.word	0x20000940
 8003db8:	20000948 	.word	0x20000948
 8003dbc:	20000930 	.word	0x20000930
 8003dc0:	2000082c 	.word	0x2000082c
 8003dc4:	20000828 	.word	0x20000828
 8003dc8:	2000093c 	.word	0x2000093c
 8003dcc:	20000938 	.word	0x20000938

08003dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dd6:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <vTaskSwitchContext+0xa4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <vTaskSwitchContext+0xa8>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003de4:	e03f      	b.n	8003e66 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <vTaskSwitchContext+0xa8>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dec:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <vTaskSwitchContext+0xac>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	fab3 f383 	clz	r3, r3
 8003df8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003dfa:	7afb      	ldrb	r3, [r7, #11]
 8003dfc:	f1c3 031f 	rsb	r3, r3, #31
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	491f      	ldr	r1, [pc, #124]	; (8003e80 <vTaskSwitchContext+0xb0>)
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	607b      	str	r3, [r7, #4]
}
 8003e28:	bf00      	nop
 8003e2a:	e7fe      	b.n	8003e2a <vTaskSwitchContext+0x5a>
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <vTaskSwitchContext+0xb0>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d104      	bne.n	8003e5c <vTaskSwitchContext+0x8c>
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <vTaskSwitchContext+0xb4>)
 8003e64:	6013      	str	r3, [r2, #0]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000950 	.word	0x20000950
 8003e78:	2000093c 	.word	0x2000093c
 8003e7c:	20000930 	.word	0x20000930
 8003e80:	2000082c 	.word	0x2000082c
 8003e84:	20000828 	.word	0x20000828

08003e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e90:	f000 f854 	bl	8003f3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <prvIdleTask+0x2c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d907      	bls.n	8003eac <prvIdleTask+0x24>
			{
				taskYIELD();
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <prvIdleTask+0x30>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003eac:	f7fc fd32 	bl	8000914 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003eb0:	e7ee      	b.n	8003e90 <prvIdleTask+0x8>
 8003eb2:	bf00      	nop
 8003eb4:	2000082c 	.word	0x2000082c
 8003eb8:	e000ed04 	.word	0xe000ed04

08003ebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	e00c      	b.n	8003ee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <prvInitialiseTaskLists+0x60>)
 8003ed4:	4413      	add	r3, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff f9a8 	bl	800322c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d9ef      	bls.n	8003ec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ee8:	480d      	ldr	r0, [pc, #52]	; (8003f20 <prvInitialiseTaskLists+0x64>)
 8003eea:	f7ff f99f 	bl	800322c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003eee:	480d      	ldr	r0, [pc, #52]	; (8003f24 <prvInitialiseTaskLists+0x68>)
 8003ef0:	f7ff f99c 	bl	800322c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ef4:	480c      	ldr	r0, [pc, #48]	; (8003f28 <prvInitialiseTaskLists+0x6c>)
 8003ef6:	f7ff f999 	bl	800322c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003efa:	480c      	ldr	r0, [pc, #48]	; (8003f2c <prvInitialiseTaskLists+0x70>)
 8003efc:	f7ff f996 	bl	800322c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f00:	480b      	ldr	r0, [pc, #44]	; (8003f30 <prvInitialiseTaskLists+0x74>)
 8003f02:	f7ff f993 	bl	800322c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <prvInitialiseTaskLists+0x78>)
 8003f08:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <prvInitialiseTaskLists+0x64>)
 8003f0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <prvInitialiseTaskLists+0x7c>)
 8003f0e:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <prvInitialiseTaskLists+0x68>)
 8003f10:	601a      	str	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	2000082c 	.word	0x2000082c
 8003f20:	200008b8 	.word	0x200008b8
 8003f24:	200008cc 	.word	0x200008cc
 8003f28:	200008e8 	.word	0x200008e8
 8003f2c:	200008fc 	.word	0x200008fc
 8003f30:	20000914 	.word	0x20000914
 8003f34:	200008e0 	.word	0x200008e0
 8003f38:	200008e4 	.word	0x200008e4

08003f3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f42:	e019      	b.n	8003f78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f44:	f000 fa0e 	bl	8004364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <prvCheckTasksWaitingTermination+0x50>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff f9f3 	bl	8003340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <prvCheckTasksWaitingTermination+0x54>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <prvCheckTasksWaitingTermination+0x54>)
 8003f62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <prvCheckTasksWaitingTermination+0x58>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <prvCheckTasksWaitingTermination+0x58>)
 8003f6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f6e:	f000 fa29 	bl	80043c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f810 	bl	8003f98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <prvCheckTasksWaitingTermination+0x58>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e1      	bne.n	8003f44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200008fc 	.word	0x200008fc
 8003f90:	20000928 	.word	0x20000928
 8003f94:	20000910 	.word	0x20000910

08003f98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d108      	bne.n	8003fbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fbc6 	bl	8004740 <vPortFree>
				vPortFree( pxTCB );
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fbc3 	bl	8004740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003fba:	e018      	b.n	8003fee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d103      	bne.n	8003fce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fbba 	bl	8004740 <vPortFree>
	}
 8003fcc:	e00f      	b.n	8003fee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d00a      	beq.n	8003fee <prvDeleteTCB+0x56>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	60fb      	str	r3, [r7, #12]
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <prvDeleteTCB+0x54>
	}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <prvResetNextTaskUnblockTime+0x38>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <prvResetNextTaskUnblockTime+0x3c>)
 800400a:	f04f 32ff 	mov.w	r2, #4294967295
 800400e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004010:	e008      	b.n	8004024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <prvResetNextTaskUnblockTime+0x38>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <prvResetNextTaskUnblockTime+0x3c>)
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	200008e0 	.word	0x200008e0
 8004034:	20000948 	.word	0x20000948

08004038 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004042:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f976 	bl	8003340 <uxListRemove>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	2201      	movs	r2, #1
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4013      	ands	r3, r2
 800406e:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004070:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d10a      	bne.n	8004090 <prvAddCurrentTaskToDelayedList+0x58>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004080:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	481a      	ldr	r0, [pc, #104]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800408a:	f7ff f8fc 	bl	8003286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800408e:	e026      	b.n	80040de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004098:	4b14      	ldr	r3, [pc, #80]	; (80040ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d209      	bcs.n	80040bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7ff f90a 	bl	80032ce <vListInsert>
}
 80040ba:	e010      	b.n	80040de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7ff f900 	bl	80032ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d202      	bcs.n	80040de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040d8:	4a09      	ldr	r2, [pc, #36]	; (8004100 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	2000092c 	.word	0x2000092c
 80040ec:	20000828 	.word	0x20000828
 80040f0:	20000930 	.word	0x20000930
 80040f4:	20000914 	.word	0x20000914
 80040f8:	200008e4 	.word	0x200008e4
 80040fc:	200008e0 	.word	0x200008e0
 8004100:	20000948 	.word	0x20000948

08004104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b04      	subs	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800411c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3b04      	subs	r3, #4
 8004122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3b04      	subs	r3, #4
 8004132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004134:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <pxPortInitialiseStack+0x64>)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3b14      	subs	r3, #20
 800413e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3b04      	subs	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f06f 0202 	mvn.w	r2, #2
 8004152:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3b20      	subs	r3, #32
 8004158:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	0800416d 	.word	0x0800416d

0800416c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <prvTaskExitError+0x54>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d00a      	beq.n	8004196 <prvTaskExitError+0x2a>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	60fb      	str	r3, [r7, #12]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <prvTaskExitError+0x28>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	60bb      	str	r3, [r7, #8]
}
 80041a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041aa:	bf00      	nop
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0fc      	beq.n	80041ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000010 	.word	0x20000010
	...

080041d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <pxCurrentTCBConst2>)
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	6808      	ldr	r0, [r1, #0]
 80041d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041da:	f380 8809 	msr	PSP, r0
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8811 	msr	BASEPRI, r0
 80041ea:	4770      	bx	lr
 80041ec:	f3af 8000 	nop.w

080041f0 <pxCurrentTCBConst2>:
 80041f0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041f8:	4808      	ldr	r0, [pc, #32]	; (800421c <prvPortStartFirstTask+0x24>)
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f380 8808 	msr	MSP, r0
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f380 8814 	msr	CONTROL, r0
 800420a:	b662      	cpsie	i
 800420c:	b661      	cpsie	f
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	df00      	svc	0
 8004218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800421a:	bf00      	nop
 800421c:	e000ed08 	.word	0xe000ed08

08004220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004226:	4b46      	ldr	r3, [pc, #280]	; (8004340 <xPortStartScheduler+0x120>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a46      	ldr	r2, [pc, #280]	; (8004344 <xPortStartScheduler+0x124>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10a      	bne.n	8004246 <xPortStartScheduler+0x26>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004246:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <xPortStartScheduler+0x120>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <xPortStartScheduler+0x128>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10a      	bne.n	8004266 <xPortStartScheduler+0x46>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60fb      	str	r3, [r7, #12]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <xPortStartScheduler+0x12c>)
 8004268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004288:	b2da      	uxtb	r2, r3
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <xPortStartScheduler+0x130>)
 800428c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800428e:	4b31      	ldr	r3, [pc, #196]	; (8004354 <xPortStartScheduler+0x134>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004294:	e009      	b.n	80042aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004296:	4b2f      	ldr	r3, [pc, #188]	; (8004354 <xPortStartScheduler+0x134>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3b01      	subs	r3, #1
 800429c:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <xPortStartScheduler+0x134>)
 800429e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d0ef      	beq.n	8004296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042b6:	4b27      	ldr	r3, [pc, #156]	; (8004354 <xPortStartScheduler+0x134>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1c3 0307 	rsb	r3, r3, #7
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00a      	beq.n	80042d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60bb      	str	r3, [r7, #8]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042d8:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <xPortStartScheduler+0x134>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <xPortStartScheduler+0x134>)
 80042e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <xPortStartScheduler+0x134>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ea:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <xPortStartScheduler+0x134>)
 80042ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <xPortStartScheduler+0x138>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <xPortStartScheduler+0x138>)
 80042fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <xPortStartScheduler+0x138>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a14      	ldr	r2, [pc, #80]	; (8004358 <xPortStartScheduler+0x138>)
 8004308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800430c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800430e:	f000 f8dd 	bl	80044cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <xPortStartScheduler+0x13c>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004318:	f000 f8fc 	bl	8004514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <xPortStartScheduler+0x140>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <xPortStartScheduler+0x140>)
 8004322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004328:	f7ff ff66 	bl	80041f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800432c:	f7ff fd50 	bl	8003dd0 <vTaskSwitchContext>
	prvTaskExitError();
 8004330:	f7ff ff1c 	bl	800416c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000ed00 	.word	0xe000ed00
 8004344:	410fc271 	.word	0x410fc271
 8004348:	410fc270 	.word	0x410fc270
 800434c:	e000e400 	.word	0xe000e400
 8004350:	20000954 	.word	0x20000954
 8004354:	20000958 	.word	0x20000958
 8004358:	e000ed20 	.word	0xe000ed20
 800435c:	20000010 	.word	0x20000010
 8004360:	e000ef34 	.word	0xe000ef34

08004364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	607b      	str	r3, [r7, #4]
}
 800437c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <vPortEnterCritical+0x58>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <vPortEnterCritical+0x58>)
 8004386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <vPortEnterCritical+0x58>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d10f      	bne.n	80043b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortEnterCritical+0x5c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	603b      	str	r3, [r7, #0]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <vPortEnterCritical+0x4a>
	}
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	20000010 	.word	0x20000010
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <vPortExitCritical+0x50>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <vPortExitCritical+0x24>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	607b      	str	r3, [r7, #4]
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <vPortExitCritical+0x50>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <vPortExitCritical+0x50>)
 80043f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <vPortExitCritical+0x50>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d105      	bne.n	8004406 <vPortExitCritical+0x42>
 80043fa:	2300      	movs	r3, #0
 80043fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f383 8811 	msr	BASEPRI, r3
}
 8004404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000010 	.word	0x20000010
	...

08004420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004420:	f3ef 8009 	mrs	r0, PSP
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <pxCurrentTCBConst>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	f01e 0f10 	tst.w	lr, #16
 8004430:	bf08      	it	eq
 8004432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	6010      	str	r0, [r2, #0]
 800443c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004444:	f380 8811 	msr	BASEPRI, r0
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f7ff fcbe 	bl	8003dd0 <vTaskSwitchContext>
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f380 8811 	msr	BASEPRI, r0
 800445c:	bc09      	pop	{r0, r3}
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004466:	f01e 0f10 	tst.w	lr, #16
 800446a:	bf08      	it	eq
 800446c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004470:	f380 8809 	msr	PSP, r0
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst>:
 8004480:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
}
 80044a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044a2:	f7ff fbdd 	bl	8003c60 <xTaskIncrementTick>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <SysTick_Handler+0x40>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f383 8811 	msr	BASEPRI, r3
}
 80044be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <vPortSetupTimerInterrupt+0x38>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <vPortSetupTimerInterrupt+0x3c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <vPortSetupTimerInterrupt+0x40>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <vPortSetupTimerInterrupt+0x44>)
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010
 8004504:	e000e018 	.word	0xe000e018
 8004508:	20000004 	.word	0x20000004
 800450c:	10624dd3 	.word	0x10624dd3
 8004510:	e000e014 	.word	0xe000e014

08004514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004524 <vPortEnableVFP+0x10>
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800451e:	6001      	str	r1, [r0, #0]
 8004520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004522:	bf00      	nop
 8004524:	e000ed88 	.word	0xe000ed88

08004528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800452e:	f3ef 8305 	mrs	r3, IPSR
 8004532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d914      	bls.n	8004564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800453a:	4a17      	ldr	r2, [pc, #92]	; (8004598 <vPortValidateInterruptPriority+0x70>)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004544:	4b15      	ldr	r3, [pc, #84]	; (800459c <vPortValidateInterruptPriority+0x74>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	7afa      	ldrb	r2, [r7, #11]
 800454a:	429a      	cmp	r2, r3
 800454c:	d20a      	bcs.n	8004564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <vPortValidateInterruptPriority+0x78>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <vPortValidateInterruptPriority+0x7c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d90a      	bls.n	800458a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	603b      	str	r3, [r7, #0]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <vPortValidateInterruptPriority+0x60>
	}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	e000e3f0 	.word	0xe000e3f0
 800459c:	20000954 	.word	0x20000954
 80045a0:	e000ed0c 	.word	0xe000ed0c
 80045a4:	20000958 	.word	0x20000958

080045a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045b4:	f7ff faaa 	bl	8003b0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045b8:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <pvPortMalloc+0x180>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045c0:	f000 f920 	bl	8004804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <pvPortMalloc+0x184>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 8093 	bne.w	80046f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01d      	beq.n	8004614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045d8:	2208      	movs	r2, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d014      	beq.n	8004614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	3308      	adds	r3, #8
 80045f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <pvPortMalloc+0x6c>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	617b      	str	r3, [r7, #20]
}
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d06e      	beq.n	80046f8 <pvPortMalloc+0x150>
 800461a:	4b45      	ldr	r3, [pc, #276]	; (8004730 <pvPortMalloc+0x188>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d869      	bhi.n	80046f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004624:	4b43      	ldr	r3, [pc, #268]	; (8004734 <pvPortMalloc+0x18c>)
 8004626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004628:	4b42      	ldr	r3, [pc, #264]	; (8004734 <pvPortMalloc+0x18c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800462e:	e004      	b.n	800463a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d903      	bls.n	800464c <pvPortMalloc+0xa4>
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f1      	bne.n	8004630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <pvPortMalloc+0x180>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	429a      	cmp	r2, r3
 8004654:	d050      	beq.n	80046f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2208      	movs	r2, #8
 800465c:	4413      	add	r3, r2
 800465e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	1ad2      	subs	r2, r2, r3
 8004670:	2308      	movs	r3, #8
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	429a      	cmp	r2, r3
 8004676:	d91f      	bls.n	80046b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <pvPortMalloc+0xf8>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	613b      	str	r3, [r7, #16]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	1ad2      	subs	r2, r2, r3
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046b2:	69b8      	ldr	r0, [r7, #24]
 80046b4:	f000 f908 	bl	80048c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <pvPortMalloc+0x188>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <pvPortMalloc+0x188>)
 80046c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <pvPortMalloc+0x188>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <pvPortMalloc+0x190>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d203      	bcs.n	80046da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <pvPortMalloc+0x188>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a18      	ldr	r2, [pc, #96]	; (8004738 <pvPortMalloc+0x190>)
 80046d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <pvPortMalloc+0x184>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <pvPortMalloc+0x194>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	4a11      	ldr	r2, [pc, #68]	; (800473c <pvPortMalloc+0x194>)
 80046f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046f8:	f7ff fa16 	bl	8003b28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <pvPortMalloc+0x174>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	60fb      	str	r3, [r7, #12]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <pvPortMalloc+0x172>
	return pvReturn;
 800471c:	69fb      	ldr	r3, [r7, #28]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3728      	adds	r7, #40	; 0x28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20004564 	.word	0x20004564
 800472c:	20004578 	.word	0x20004578
 8004730:	20004568 	.word	0x20004568
 8004734:	2000455c 	.word	0x2000455c
 8004738:	2000456c 	.word	0x2000456c
 800473c:	20004570 	.word	0x20004570

08004740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04d      	beq.n	80047ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004752:	2308      	movs	r3, #8
 8004754:	425b      	negs	r3, r3
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <vPortFree+0xb8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <vPortFree+0x44>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	60fb      	str	r3, [r7, #12]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <vPortFree+0x62>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60bb      	str	r3, [r7, #8]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <vPortFree+0xb8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01e      	beq.n	80047ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11a      	bne.n	80047ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <vPortFree+0xb8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047c8:	f7ff f9a0 	bl	8003b0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <vPortFree+0xbc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4413      	add	r3, r2
 80047d6:	4a09      	ldr	r2, [pc, #36]	; (80047fc <vPortFree+0xbc>)
 80047d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047da:	6938      	ldr	r0, [r7, #16]
 80047dc:	f000 f874 	bl	80048c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <vPortFree+0xc0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a06      	ldr	r2, [pc, #24]	; (8004800 <vPortFree+0xc0>)
 80047e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047ea:	f7ff f99d 	bl	8003b28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20004578 	.word	0x20004578
 80047fc:	20004568 	.word	0x20004568
 8004800:	20004574 	.word	0x20004574

08004804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800480a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800480e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <prvHeapInit+0xac>)
 8004812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00c      	beq.n	8004838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3307      	adds	r3, #7
 8004822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <prvHeapInit+0xac>)
 8004834:	4413      	add	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <prvHeapInit+0xb0>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <prvHeapInit+0xb0>)
 8004844:	2200      	movs	r2, #0
 8004846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4413      	add	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004850:	2208      	movs	r2, #8
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <prvHeapInit+0xb4>)
 8004864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <prvHeapInit+0xb4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <prvHeapInit+0xb4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <prvHeapInit+0xb4>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <prvHeapInit+0xb8>)
 8004892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <prvHeapInit+0xbc>)
 800489a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <prvHeapInit+0xc0>)
 800489e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048a2:	601a      	str	r2, [r3, #0]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	2000095c 	.word	0x2000095c
 80048b4:	2000455c 	.word	0x2000455c
 80048b8:	20004564 	.word	0x20004564
 80048bc:	2000456c 	.word	0x2000456c
 80048c0:	20004568 	.word	0x20004568
 80048c4:	20004578 	.word	0x20004578

080048c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <prvInsertBlockIntoFreeList+0xac>)
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e002      	b.n	80048dc <prvInsertBlockIntoFreeList+0x14>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d8f7      	bhi.n	80048d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4413      	add	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d108      	bne.n	800490a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	441a      	add	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d118      	bne.n	8004950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <prvInsertBlockIntoFreeList+0xb0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d00d      	beq.n	8004946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	441a      	add	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e008      	b.n	8004958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <prvInsertBlockIntoFreeList+0xb0>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e003      	b.n	8004958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d002      	beq.n	8004966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000455c 	.word	0x2000455c
 8004978:	20004564 	.word	0x20004564

0800497c <__libc_init_array>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4d0d      	ldr	r5, [pc, #52]	; (80049b4 <__libc_init_array+0x38>)
 8004980:	4c0d      	ldr	r4, [pc, #52]	; (80049b8 <__libc_init_array+0x3c>)
 8004982:	1b64      	subs	r4, r4, r5
 8004984:	10a4      	asrs	r4, r4, #2
 8004986:	2600      	movs	r6, #0
 8004988:	42a6      	cmp	r6, r4
 800498a:	d109      	bne.n	80049a0 <__libc_init_array+0x24>
 800498c:	4d0b      	ldr	r5, [pc, #44]	; (80049bc <__libc_init_array+0x40>)
 800498e:	4c0c      	ldr	r4, [pc, #48]	; (80049c0 <__libc_init_array+0x44>)
 8004990:	f000 f820 	bl	80049d4 <_init>
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	2600      	movs	r6, #0
 800499a:	42a6      	cmp	r6, r4
 800499c:	d105      	bne.n	80049aa <__libc_init_array+0x2e>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a4:	4798      	blx	r3
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7ee      	b.n	8004988 <__libc_init_array+0xc>
 80049aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ae:	4798      	blx	r3
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7f2      	b.n	800499a <__libc_init_array+0x1e>
 80049b4:	08004a5c 	.word	0x08004a5c
 80049b8:	08004a5c 	.word	0x08004a5c
 80049bc:	08004a5c 	.word	0x08004a5c
 80049c0:	08004a60 	.word	0x08004a60

080049c4 <memset>:
 80049c4:	4402      	add	r2, r0
 80049c6:	4603      	mov	r3, r0
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d100      	bne.n	80049ce <memset+0xa>
 80049cc:	4770      	bx	lr
 80049ce:	f803 1b01 	strb.w	r1, [r3], #1
 80049d2:	e7f9      	b.n	80049c8 <memset+0x4>

080049d4 <_init>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr

080049e0 <_fini>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr
