// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="div13,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.404500,HLS_SYN_LAT=18,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1914,HLS_SYN_LUT=2157,HLS_VERSION=2019_1}" *)

module div13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_0,
        x_1,
        x_2,
        x_3,
        x_4,
        x_5,
        x_6,
        x_7,
        x_8,
        x_9,
        quotient_0,
        quotient_1,
        quotient_2,
        quotient_3,
        quotient_4,
        quotient_5,
        quotient_6,
        quotient_7,
        quotient_8,
        quotient_9,
        remainder_0,
        remainder_1,
        remainder_2,
        remainder_3,
        remainder_4,
        remainder_5,
        remainder_6,
        remainder_7,
        remainder_8,
        remainder_9
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state9 = 4'd4;
parameter    ap_ST_fsm_state10 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_0;
input  [31:0] x_1;
input  [31:0] x_2;
input  [31:0] x_3;
input  [31:0] x_4;
input  [31:0] x_5;
input  [31:0] x_6;
input  [31:0] x_7;
input  [31:0] x_8;
input  [31:0] x_9;
output  [31:0] quotient_0;
output  [31:0] quotient_1;
output  [31:0] quotient_2;
output  [31:0] quotient_3;
output  [31:0] quotient_4;
output  [31:0] quotient_5;
output  [31:0] quotient_6;
output  [31:0] quotient_7;
output  [31:0] quotient_8;
output  [31:0] quotient_9;
output  [31:0] remainder_0;
output  [31:0] remainder_1;
output  [31:0] remainder_2;
output  [31:0] remainder_3;
output  [31:0] remainder_4;
output  [31:0] remainder_5;
output  [31:0] remainder_6;
output  [31:0] remainder_7;
output  [31:0] remainder_8;
output  [31:0] remainder_9;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] quotient_0;
reg[31:0] quotient_1;
reg[31:0] quotient_2;
reg[31:0] quotient_3;
reg[31:0] quotient_4;
reg[31:0] quotient_5;
reg[31:0] quotient_6;
reg[31:0] quotient_7;
reg[31:0] quotient_8;
reg[31:0] quotient_9;
reg[31:0] remainder_0;
reg[31:0] remainder_1;
reg[31:0] remainder_2;
reg[31:0] remainder_3;
reg[31:0] remainder_4;
reg[31:0] remainder_5;
reg[31:0] remainder_6;
reg[31:0] remainder_7;
reg[31:0] remainder_8;
reg[31:0] remainder_9;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] n_0_reg_410;
reg   [3:0] n_0_reg_410_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] n_0_reg_410_pp0_iter2_reg;
reg   [3:0] n_0_reg_410_pp0_iter3_reg;
reg   [3:0] n_0_reg_410_pp0_iter4_reg;
reg   [3:0] n_0_reg_410_pp0_iter5_reg;
wire   [0:0] icmp_ln23_fu_422_p2;
reg   [0:0] icmp_ln23_reg_1387;
wire   [3:0] n_fu_428_p2;
reg   [3:0] n_reg_1391;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] trunc_ln25_fu_460_p1;
reg   [0:0] trunc_ln25_reg_1396;
reg   [0:0] trunc_ln25_reg_1396_pp0_iter1_reg;
reg   [0:0] trunc_ln25_reg_1396_pp0_iter2_reg;
reg   [0:0] trunc_ln25_reg_1396_pp0_iter3_reg;
reg   [0:0] trunc_ln25_reg_1396_pp0_iter4_reg;
reg   [0:0] trunc_ln25_reg_1396_pp0_iter5_reg;
wire   [0:0] icmp_ln32_fu_474_p2;
reg   [0:0] icmp_ln32_reg_1401;
reg   [0:0] icmp_ln32_reg_1401_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_1401_pp0_iter2_reg;
reg   [0:0] icmp_ln32_reg_1401_pp0_iter3_reg;
reg   [0:0] icmp_ln32_reg_1401_pp0_iter4_reg;
wire   [19:0] divword_fu_486_p3;
reg   [19:0] divword_reg_1407;
reg   [0:0] tmp_2_reg_1412;
reg   [0:0] tmp_3_reg_1417;
reg   [0:0] tmp_3_reg_1417_pp0_iter1_reg;
reg   [0:0] tmp_6_reg_1424;
reg   [0:0] tmp_6_reg_1424_pp0_iter1_reg;
reg   [0:0] tmp_9_reg_1431;
reg   [0:0] tmp_9_reg_1431_pp0_iter1_reg;
reg   [0:0] tmp_9_reg_1431_pp0_iter2_reg;
reg   [0:0] tmp_12_reg_1438;
reg   [0:0] tmp_12_reg_1438_pp0_iter1_reg;
reg   [0:0] tmp_12_reg_1438_pp0_iter2_reg;
reg   [0:0] tmp_15_reg_1445;
reg   [0:0] tmp_15_reg_1445_pp0_iter1_reg;
reg   [0:0] tmp_15_reg_1445_pp0_iter2_reg;
reg   [0:0] tmp_15_reg_1445_pp0_iter3_reg;
reg   [0:0] tmp_18_reg_1452;
reg   [0:0] tmp_18_reg_1452_pp0_iter1_reg;
reg   [0:0] tmp_18_reg_1452_pp0_iter2_reg;
reg   [0:0] tmp_18_reg_1452_pp0_iter3_reg;
reg   [0:0] tmp_21_reg_1459;
reg   [0:0] tmp_21_reg_1459_pp0_iter1_reg;
reg   [0:0] tmp_21_reg_1459_pp0_iter2_reg;
reg   [0:0] tmp_21_reg_1459_pp0_iter3_reg;
reg   [0:0] tmp_21_reg_1459_pp0_iter4_reg;
reg   [0:0] tmp_24_reg_1466;
reg   [0:0] tmp_24_reg_1466_pp0_iter1_reg;
reg   [0:0] tmp_24_reg_1466_pp0_iter2_reg;
reg   [0:0] tmp_24_reg_1466_pp0_iter3_reg;
reg   [0:0] tmp_24_reg_1466_pp0_iter4_reg;
reg   [0:0] tmp_27_reg_1473;
reg   [0:0] tmp_27_reg_1473_pp0_iter1_reg;
reg   [0:0] tmp_27_reg_1473_pp0_iter2_reg;
reg   [0:0] tmp_27_reg_1473_pp0_iter3_reg;
reg   [0:0] tmp_27_reg_1473_pp0_iter4_reg;
reg   [0:0] tmp_27_reg_1473_pp0_iter5_reg;
reg   [0:0] tmp_30_reg_1480;
reg   [0:0] tmp_30_reg_1480_pp0_iter1_reg;
reg   [0:0] tmp_30_reg_1480_pp0_iter2_reg;
reg   [0:0] tmp_30_reg_1480_pp0_iter3_reg;
reg   [0:0] tmp_30_reg_1480_pp0_iter4_reg;
reg   [0:0] tmp_30_reg_1480_pp0_iter5_reg;
wire   [0:0] icmp_ln32_1_fu_592_p2;
reg   [0:0] icmp_ln32_1_reg_1487;
reg   [0:0] icmp_ln32_1_reg_1487_pp0_iter2_reg;
reg   [0:0] icmp_ln32_1_reg_1487_pp0_iter3_reg;
reg   [0:0] icmp_ln32_1_reg_1487_pp0_iter4_reg;
wire   [0:0] icmp_ln32_2_fu_627_p2;
reg   [0:0] icmp_ln32_2_reg_1492;
reg   [0:0] icmp_ln32_2_reg_1492_pp0_iter2_reg;
reg   [0:0] icmp_ln32_2_reg_1492_pp0_iter3_reg;
reg   [0:0] icmp_ln32_2_reg_1492_pp0_iter4_reg;
wire   [30:0] add_ln37_1_fu_640_p2;
reg   [30:0] add_ln37_1_reg_1498;
wire   [29:0] trunc_ln37_1_fu_646_p1;
reg   [29:0] trunc_ln37_1_reg_1503;
wire   [0:0] icmp_ln32_3_fu_673_p2;
reg   [0:0] icmp_ln32_3_reg_1508;
reg   [0:0] icmp_ln32_3_reg_1508_pp0_iter3_reg;
reg   [0:0] icmp_ln32_3_reg_1508_pp0_iter4_reg;
wire   [0:0] icmp_ln32_4_fu_722_p2;
reg   [0:0] icmp_ln32_4_reg_1513;
reg   [0:0] icmp_ln32_4_reg_1513_pp0_iter3_reg;
reg   [0:0] icmp_ln32_4_reg_1513_pp0_iter4_reg;
reg   [0:0] icmp_ln32_4_reg_1513_pp0_iter5_reg;
wire   [30:0] add_ln37_3_fu_735_p2;
reg   [30:0] add_ln37_3_reg_1519;
wire   [29:0] trunc_ln37_5_fu_741_p1;
reg   [29:0] trunc_ln37_5_reg_1524;
wire   [0:0] icmp_ln32_5_fu_768_p2;
reg   [0:0] icmp_ln32_5_reg_1529;
reg   [0:0] icmp_ln32_5_reg_1529_pp0_iter4_reg;
reg   [0:0] icmp_ln32_5_reg_1529_pp0_iter5_reg;
wire   [0:0] icmp_ln32_6_fu_817_p2;
reg   [0:0] icmp_ln32_6_reg_1534;
reg   [0:0] icmp_ln32_6_reg_1534_pp0_iter4_reg;
reg   [0:0] icmp_ln32_6_reg_1534_pp0_iter5_reg;
wire   [30:0] add_ln37_5_fu_830_p2;
reg   [30:0] add_ln37_5_reg_1540;
wire   [29:0] trunc_ln37_9_fu_836_p1;
reg   [29:0] trunc_ln37_9_reg_1545;
wire   [0:0] icmp_ln32_7_fu_863_p2;
reg   [0:0] icmp_ln32_7_reg_1550;
reg   [0:0] icmp_ln32_7_reg_1550_pp0_iter5_reg;
wire   [0:0] icmp_ln32_8_fu_912_p2;
reg   [0:0] icmp_ln32_8_reg_1555;
reg   [0:0] icmp_ln32_8_reg_1555_pp0_iter5_reg;
wire   [30:0] add_ln37_7_fu_925_p2;
reg   [30:0] add_ln37_7_reg_1561;
wire   [29:0] trunc_ln37_13_fu_931_p1;
reg   [29:0] trunc_ln37_13_reg_1566;
wire   [3:0] select_ln32_7_fu_983_p3;
reg   [3:0] select_ln32_7_reg_1571;
wire   [0:0] icmp_ln32_9_fu_1013_p2;
reg   [0:0] icmp_ln32_9_reg_1576;
wire   [0:0] icmp_ln32_10_fu_1062_p2;
reg   [0:0] icmp_ln32_10_reg_1581;
wire   [30:0] add_ln37_9_fu_1075_p2;
reg   [30:0] add_ln37_9_reg_1587;
wire   [29:0] trunc_ln37_17_fu_1081_p1;
reg   [29:0] trunc_ln37_17_reg_1592;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [3:0] ap_phi_mux_n_0_phi_fu_414_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln32_fu_1373_p1;
reg   [31:0] quotient_8_preg;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] select_ln32_24_fu_1347_p3;
reg   [31:0] remainder_8_preg;
reg   [31:0] quotient_7_preg;
reg   [31:0] remainder_7_preg;
reg   [31:0] quotient_6_preg;
reg   [31:0] remainder_6_preg;
reg   [31:0] quotient_5_preg;
reg   [31:0] remainder_5_preg;
reg   [31:0] quotient_4_preg;
reg   [31:0] remainder_4_preg;
reg   [31:0] quotient_3_preg;
reg   [31:0] remainder_3_preg;
reg   [31:0] quotient_2_preg;
reg   [31:0] remainder_2_preg;
reg   [31:0] quotient_1_preg;
reg   [31:0] remainder_1_preg;
reg   [31:0] quotient_0_preg;
reg   [31:0] remainder_0_preg;
reg   [31:0] quotient_9_preg;
reg   [31:0] remainder_9_preg;
wire   [31:0] tmp_1_fu_434_p12;
wire   [19:0] trunc_ln1_fu_464_p4;
wire   [19:0] add_ln33_fu_480_p2;
wire   [20:0] or_ln_fu_582_p3;
wire   [30:0] zext_ln37_fu_588_p1;
wire   [30:0] add_ln37_fu_598_p2;
wire   [30:0] zext_ln37_1_fu_604_p1;
wire   [30:0] select_ln32_3_fu_608_p3;
wire   [31:0] or_ln37_1_fu_620_p3;
wire   [29:0] trunc_ln37_fu_616_p1;
wire   [30:0] tmp_4_fu_633_p3;
wire   [30:0] tmp_5_fu_650_p3;
wire   [30:0] select_ln32_4_fu_656_p3;
wire   [31:0] or_ln37_2_fu_666_p3;
wire   [29:0] trunc_ln37_2_fu_662_p1;
wire   [30:0] tmp_7_fu_679_p3;
wire   [29:0] trunc_ln37_3_fu_692_p1;
wire   [30:0] add_ln37_2_fu_686_p2;
wire   [30:0] tmp_8_fu_696_p3;
wire   [30:0] select_ln32_6_fu_703_p3;
wire   [31:0] or_ln37_3_fu_715_p3;
wire   [29:0] trunc_ln37_4_fu_711_p1;
wire   [30:0] tmp_10_fu_728_p3;
wire   [30:0] tmp_s_fu_745_p3;
wire   [30:0] select_ln32_8_fu_751_p3;
wire   [31:0] or_ln37_4_fu_761_p3;
wire   [29:0] trunc_ln37_6_fu_757_p1;
wire   [30:0] tmp_13_fu_774_p3;
wire   [29:0] trunc_ln37_7_fu_787_p1;
wire   [30:0] add_ln37_4_fu_781_p2;
wire   [30:0] tmp_11_fu_791_p3;
wire   [30:0] select_ln32_10_fu_798_p3;
wire   [31:0] or_ln37_5_fu_810_p3;
wire   [29:0] trunc_ln37_8_fu_806_p1;
wire   [30:0] tmp_16_fu_823_p3;
wire   [30:0] tmp_14_fu_840_p3;
wire   [30:0] select_ln32_12_fu_846_p3;
wire   [31:0] or_ln37_6_fu_856_p3;
wire   [29:0] trunc_ln37_10_fu_852_p1;
wire   [30:0] tmp_19_fu_869_p3;
wire   [29:0] trunc_ln37_11_fu_882_p1;
wire   [30:0] add_ln37_6_fu_876_p2;
wire   [30:0] tmp_17_fu_886_p3;
wire   [30:0] select_ln32_14_fu_893_p3;
wire   [31:0] or_ln37_7_fu_905_p3;
wire   [29:0] trunc_ln37_12_fu_901_p1;
wire   [30:0] tmp_22_fu_918_p3;
wire   [2:0] select_ln34_fu_942_p3;
wire   [2:0] select_ln32_fu_935_p3;
wire   [2:0] select_ln32_2_fu_949_p3;
wire   [2:0] or_ln34_fu_956_p2;
wire   [2:0] select_ln32_5_fu_962_p3;
wire   [3:0] shl_ln_fu_969_p3;
wire   [3:0] or_ln34_1_fu_977_p2;
wire   [30:0] tmp_20_fu_990_p3;
wire   [30:0] select_ln32_16_fu_996_p3;
wire   [31:0] or_ln37_8_fu_1006_p3;
wire   [29:0] trunc_ln37_14_fu_1002_p1;
wire   [30:0] tmp_25_fu_1019_p3;
wire   [29:0] trunc_ln37_15_fu_1032_p1;
wire   [30:0] add_ln37_8_fu_1026_p2;
wire   [30:0] tmp_23_fu_1036_p3;
wire   [30:0] select_ln32_18_fu_1043_p3;
wire   [31:0] or_ln37_9_fu_1055_p3;
wire   [29:0] trunc_ln37_16_fu_1051_p1;
wire   [30:0] tmp_28_fu_1068_p3;
wire   [4:0] shl_ln31_1_fu_1085_p3;
wire   [4:0] or_ln34_2_fu_1092_p2;
wire   [4:0] select_ln32_9_fu_1098_p3;
wire   [5:0] shl_ln31_2_fu_1105_p3;
wire   [5:0] or_ln34_3_fu_1113_p2;
wire   [5:0] select_ln32_11_fu_1119_p3;
wire   [6:0] shl_ln31_3_fu_1126_p3;
wire   [6:0] or_ln34_4_fu_1134_p2;
wire   [6:0] select_ln32_13_fu_1140_p3;
wire   [7:0] shl_ln31_4_fu_1147_p3;
wire   [7:0] or_ln34_5_fu_1155_p2;
wire   [7:0] select_ln32_15_fu_1161_p3;
wire   [8:0] shl_ln31_5_fu_1168_p3;
wire   [8:0] or_ln34_6_fu_1176_p2;
wire   [8:0] select_ln32_17_fu_1182_p3;
wire   [9:0] shl_ln31_6_fu_1189_p3;
wire   [9:0] or_ln34_7_fu_1197_p2;
wire   [9:0] select_ln32_19_fu_1203_p3;
wire   [10:0] shl_ln31_7_fu_1210_p3;
wire   [30:0] tmp_26_fu_1224_p3;
wire   [30:0] select_ln32_20_fu_1230_p3;
wire   [10:0] or_ln34_8_fu_1218_p2;
wire   [10:0] select_ln32_21_fu_1247_p3;
wire   [31:0] or_ln37_s_fu_1240_p3;
wire   [29:0] trunc_ln37_18_fu_1236_p1;
wire   [11:0] shl_ln31_8_fu_1254_p3;
wire   [30:0] tmp_31_fu_1268_p3;
wire   [29:0] trunc_ln37_19_fu_1287_p1;
wire   [0:0] icmp_ln32_11_fu_1262_p2;
wire   [30:0] add_ln37_10_fu_1281_p2;
wire   [30:0] tmp_29_fu_1291_p3;
wire   [30:0] select_ln32_22_fu_1298_p3;
wire   [11:0] or_ln34_9_fu_1275_p2;
wire   [11:0] select_ln32_23_fu_1313_p3;
wire   [31:0] or_ln37_10_fu_1306_p3;
wire   [12:0] shl_ln31_9_fu_1321_p3;
wire   [0:0] icmp_ln32_12_fu_1329_p2;
wire   [31:0] add_ln33_1_fu_1335_p2;
wire   [12:0] or_ln34_10_fu_1341_p2;
wire   [12:0] select_ln32_25_fu_1365_p3;
wire    ap_CS_fsm_state10;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 quotient_8_preg = 32'd0;
#0 remainder_8_preg = 32'd0;
#0 quotient_7_preg = 32'd0;
#0 remainder_7_preg = 32'd0;
#0 quotient_6_preg = 32'd0;
#0 remainder_6_preg = 32'd0;
#0 quotient_5_preg = 32'd0;
#0 remainder_5_preg = 32'd0;
#0 quotient_4_preg = 32'd0;
#0 remainder_4_preg = 32'd0;
#0 quotient_3_preg = 32'd0;
#0 remainder_3_preg = 32'd0;
#0 quotient_2_preg = 32'd0;
#0 remainder_2_preg = 32'd0;
#0 quotient_1_preg = 32'd0;
#0 remainder_1_preg = 32'd0;
#0 quotient_0_preg = 32'd0;
#0 remainder_0_preg = 32'd0;
#0 quotient_9_preg = 32'd0;
#0 remainder_9_preg = 32'd0;
end

div13_mux_104_32_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
div13_mux_104_32_bkb_U1(
    .din0(x_0),
    .din1(x_1),
    .din2(x_2),
    .din3(x_3),
    .din4(x_4),
    .din5(x_5),
    .din6(x_6),
    .din7(x_7),
    .din8(x_8),
    .din9(x_9),
    .din10(ap_phi_mux_n_0_phi_fu_414_p4),
    .dout(tmp_1_fu_434_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_0_preg[0] <= 1'b0;
        quotient_0_preg[1] <= 1'b0;
        quotient_0_preg[2] <= 1'b0;
        quotient_0_preg[3] <= 1'b0;
        quotient_0_preg[4] <= 1'b0;
        quotient_0_preg[5] <= 1'b0;
        quotient_0_preg[6] <= 1'b0;
        quotient_0_preg[7] <= 1'b0;
        quotient_0_preg[8] <= 1'b0;
        quotient_0_preg[9] <= 1'b0;
        quotient_0_preg[10] <= 1'b0;
        quotient_0_preg[11] <= 1'b0;
        quotient_0_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_0_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_1_preg[0] <= 1'b0;
        quotient_1_preg[1] <= 1'b0;
        quotient_1_preg[2] <= 1'b0;
        quotient_1_preg[3] <= 1'b0;
        quotient_1_preg[4] <= 1'b0;
        quotient_1_preg[5] <= 1'b0;
        quotient_1_preg[6] <= 1'b0;
        quotient_1_preg[7] <= 1'b0;
        quotient_1_preg[8] <= 1'b0;
        quotient_1_preg[9] <= 1'b0;
        quotient_1_preg[10] <= 1'b0;
        quotient_1_preg[11] <= 1'b0;
        quotient_1_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_1_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_2_preg[0] <= 1'b0;
        quotient_2_preg[1] <= 1'b0;
        quotient_2_preg[2] <= 1'b0;
        quotient_2_preg[3] <= 1'b0;
        quotient_2_preg[4] <= 1'b0;
        quotient_2_preg[5] <= 1'b0;
        quotient_2_preg[6] <= 1'b0;
        quotient_2_preg[7] <= 1'b0;
        quotient_2_preg[8] <= 1'b0;
        quotient_2_preg[9] <= 1'b0;
        quotient_2_preg[10] <= 1'b0;
        quotient_2_preg[11] <= 1'b0;
        quotient_2_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_2_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_3_preg[0] <= 1'b0;
        quotient_3_preg[1] <= 1'b0;
        quotient_3_preg[2] <= 1'b0;
        quotient_3_preg[3] <= 1'b0;
        quotient_3_preg[4] <= 1'b0;
        quotient_3_preg[5] <= 1'b0;
        quotient_3_preg[6] <= 1'b0;
        quotient_3_preg[7] <= 1'b0;
        quotient_3_preg[8] <= 1'b0;
        quotient_3_preg[9] <= 1'b0;
        quotient_3_preg[10] <= 1'b0;
        quotient_3_preg[11] <= 1'b0;
        quotient_3_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_3_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_4_preg[0] <= 1'b0;
        quotient_4_preg[1] <= 1'b0;
        quotient_4_preg[2] <= 1'b0;
        quotient_4_preg[3] <= 1'b0;
        quotient_4_preg[4] <= 1'b0;
        quotient_4_preg[5] <= 1'b0;
        quotient_4_preg[6] <= 1'b0;
        quotient_4_preg[7] <= 1'b0;
        quotient_4_preg[8] <= 1'b0;
        quotient_4_preg[9] <= 1'b0;
        quotient_4_preg[10] <= 1'b0;
        quotient_4_preg[11] <= 1'b0;
        quotient_4_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_4_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_5_preg[0] <= 1'b0;
        quotient_5_preg[1] <= 1'b0;
        quotient_5_preg[2] <= 1'b0;
        quotient_5_preg[3] <= 1'b0;
        quotient_5_preg[4] <= 1'b0;
        quotient_5_preg[5] <= 1'b0;
        quotient_5_preg[6] <= 1'b0;
        quotient_5_preg[7] <= 1'b0;
        quotient_5_preg[8] <= 1'b0;
        quotient_5_preg[9] <= 1'b0;
        quotient_5_preg[10] <= 1'b0;
        quotient_5_preg[11] <= 1'b0;
        quotient_5_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_5_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_6_preg[0] <= 1'b0;
        quotient_6_preg[1] <= 1'b0;
        quotient_6_preg[2] <= 1'b0;
        quotient_6_preg[3] <= 1'b0;
        quotient_6_preg[4] <= 1'b0;
        quotient_6_preg[5] <= 1'b0;
        quotient_6_preg[6] <= 1'b0;
        quotient_6_preg[7] <= 1'b0;
        quotient_6_preg[8] <= 1'b0;
        quotient_6_preg[9] <= 1'b0;
        quotient_6_preg[10] <= 1'b0;
        quotient_6_preg[11] <= 1'b0;
        quotient_6_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_6_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_7_preg[0] <= 1'b0;
        quotient_7_preg[1] <= 1'b0;
        quotient_7_preg[2] <= 1'b0;
        quotient_7_preg[3] <= 1'b0;
        quotient_7_preg[4] <= 1'b0;
        quotient_7_preg[5] <= 1'b0;
        quotient_7_preg[6] <= 1'b0;
        quotient_7_preg[7] <= 1'b0;
        quotient_7_preg[8] <= 1'b0;
        quotient_7_preg[9] <= 1'b0;
        quotient_7_preg[10] <= 1'b0;
        quotient_7_preg[11] <= 1'b0;
        quotient_7_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_7_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_8_preg[0] <= 1'b0;
        quotient_8_preg[1] <= 1'b0;
        quotient_8_preg[2] <= 1'b0;
        quotient_8_preg[3] <= 1'b0;
        quotient_8_preg[4] <= 1'b0;
        quotient_8_preg[5] <= 1'b0;
        quotient_8_preg[6] <= 1'b0;
        quotient_8_preg[7] <= 1'b0;
        quotient_8_preg[8] <= 1'b0;
        quotient_8_preg[9] <= 1'b0;
        quotient_8_preg[10] <= 1'b0;
        quotient_8_preg[11] <= 1'b0;
        quotient_8_preg[12] <= 1'b0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                        quotient_8_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                quotient_9_preg[0] <= 1'b0;
        quotient_9_preg[1] <= 1'b0;
        quotient_9_preg[2] <= 1'b0;
        quotient_9_preg[3] <= 1'b0;
        quotient_9_preg[4] <= 1'b0;
        quotient_9_preg[5] <= 1'b0;
        quotient_9_preg[6] <= 1'b0;
        quotient_9_preg[7] <= 1'b0;
        quotient_9_preg[8] <= 1'b0;
        quotient_9_preg[9] <= 1'b0;
        quotient_9_preg[10] <= 1'b0;
        quotient_9_preg[11] <= 1'b0;
        quotient_9_preg[12] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1) & ((n_0_reg_410_pp0_iter5_reg == 4'd9) | ((n_0_reg_410_pp0_iter5_reg == 4'd10) | ((n_0_reg_410_pp0_iter5_reg == 4'd11) | ((n_0_reg_410_pp0_iter5_reg == 4'd12) | ((n_0_reg_410_pp0_iter5_reg == 4'd13) | ((n_0_reg_410_pp0_iter5_reg == 4'd14) | (n_0_reg_410_pp0_iter5_reg == 4'd15))))))))) begin
                        quotient_9_preg[12 : 0] <= zext_ln32_fu_1373_p1[12 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_0_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_0_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_1_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_1_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_2_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_2_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_3_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_3_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_4_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_4_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_5_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_5_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_6_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_6_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_7_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_7_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_8_preg <= 32'd0;
    end else begin
        if (((n_0_reg_410_pp0_iter5_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            remainder_8_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        remainder_9_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1) & ((n_0_reg_410_pp0_iter5_reg == 4'd9) | ((n_0_reg_410_pp0_iter5_reg == 4'd10) | ((n_0_reg_410_pp0_iter5_reg == 4'd11) | ((n_0_reg_410_pp0_iter5_reg == 4'd12) | ((n_0_reg_410_pp0_iter5_reg == 4'd13) | ((n_0_reg_410_pp0_iter5_reg == 4'd14) | (n_0_reg_410_pp0_iter5_reg == 4'd15))))))))) begin
            remainder_9_preg <= select_ln32_24_fu_1347_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1387 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        n_0_reg_410 <= n_reg_1391;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_0_reg_410 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln37_1_reg_1498 <= add_ln37_1_fu_640_p2;
        icmp_ln23_reg_1387 <= icmp_ln23_fu_422_p2;
        icmp_ln32_1_reg_1487 <= icmp_ln32_1_fu_592_p2;
        icmp_ln32_2_reg_1492 <= icmp_ln32_2_fu_627_p2;
        icmp_ln32_reg_1401_pp0_iter1_reg <= icmp_ln32_reg_1401;
        n_0_reg_410_pp0_iter1_reg <= n_0_reg_410;
        tmp_12_reg_1438_pp0_iter1_reg <= tmp_12_reg_1438;
        tmp_15_reg_1445_pp0_iter1_reg <= tmp_15_reg_1445;
        tmp_18_reg_1452_pp0_iter1_reg <= tmp_18_reg_1452;
        tmp_21_reg_1459_pp0_iter1_reg <= tmp_21_reg_1459;
        tmp_24_reg_1466_pp0_iter1_reg <= tmp_24_reg_1466;
        tmp_27_reg_1473_pp0_iter1_reg <= tmp_27_reg_1473;
        tmp_30_reg_1480_pp0_iter1_reg <= tmp_30_reg_1480;
        tmp_3_reg_1417_pp0_iter1_reg <= tmp_3_reg_1417;
        tmp_6_reg_1424_pp0_iter1_reg <= tmp_6_reg_1424;
        tmp_9_reg_1431_pp0_iter1_reg <= tmp_9_reg_1431;
        trunc_ln25_reg_1396_pp0_iter1_reg <= trunc_ln25_reg_1396;
        trunc_ln37_1_reg_1503 <= trunc_ln37_1_fu_646_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln37_3_reg_1519 <= add_ln37_3_fu_735_p2;
        add_ln37_5_reg_1540 <= add_ln37_5_fu_830_p2;
        add_ln37_7_reg_1561 <= add_ln37_7_fu_925_p2;
        add_ln37_9_reg_1587 <= add_ln37_9_fu_1075_p2;
        icmp_ln32_10_reg_1581 <= icmp_ln32_10_fu_1062_p2;
        icmp_ln32_1_reg_1487_pp0_iter2_reg <= icmp_ln32_1_reg_1487;
        icmp_ln32_1_reg_1487_pp0_iter3_reg <= icmp_ln32_1_reg_1487_pp0_iter2_reg;
        icmp_ln32_1_reg_1487_pp0_iter4_reg <= icmp_ln32_1_reg_1487_pp0_iter3_reg;
        icmp_ln32_2_reg_1492_pp0_iter2_reg <= icmp_ln32_2_reg_1492;
        icmp_ln32_2_reg_1492_pp0_iter3_reg <= icmp_ln32_2_reg_1492_pp0_iter2_reg;
        icmp_ln32_2_reg_1492_pp0_iter4_reg <= icmp_ln32_2_reg_1492_pp0_iter3_reg;
        icmp_ln32_3_reg_1508 <= icmp_ln32_3_fu_673_p2;
        icmp_ln32_3_reg_1508_pp0_iter3_reg <= icmp_ln32_3_reg_1508;
        icmp_ln32_3_reg_1508_pp0_iter4_reg <= icmp_ln32_3_reg_1508_pp0_iter3_reg;
        icmp_ln32_4_reg_1513 <= icmp_ln32_4_fu_722_p2;
        icmp_ln32_4_reg_1513_pp0_iter3_reg <= icmp_ln32_4_reg_1513;
        icmp_ln32_4_reg_1513_pp0_iter4_reg <= icmp_ln32_4_reg_1513_pp0_iter3_reg;
        icmp_ln32_4_reg_1513_pp0_iter5_reg <= icmp_ln32_4_reg_1513_pp0_iter4_reg;
        icmp_ln32_5_reg_1529 <= icmp_ln32_5_fu_768_p2;
        icmp_ln32_5_reg_1529_pp0_iter4_reg <= icmp_ln32_5_reg_1529;
        icmp_ln32_5_reg_1529_pp0_iter5_reg <= icmp_ln32_5_reg_1529_pp0_iter4_reg;
        icmp_ln32_6_reg_1534 <= icmp_ln32_6_fu_817_p2;
        icmp_ln32_6_reg_1534_pp0_iter4_reg <= icmp_ln32_6_reg_1534;
        icmp_ln32_6_reg_1534_pp0_iter5_reg <= icmp_ln32_6_reg_1534_pp0_iter4_reg;
        icmp_ln32_7_reg_1550 <= icmp_ln32_7_fu_863_p2;
        icmp_ln32_7_reg_1550_pp0_iter5_reg <= icmp_ln32_7_reg_1550;
        icmp_ln32_8_reg_1555 <= icmp_ln32_8_fu_912_p2;
        icmp_ln32_8_reg_1555_pp0_iter5_reg <= icmp_ln32_8_reg_1555;
        icmp_ln32_9_reg_1576 <= icmp_ln32_9_fu_1013_p2;
        icmp_ln32_reg_1401_pp0_iter2_reg <= icmp_ln32_reg_1401_pp0_iter1_reg;
        icmp_ln32_reg_1401_pp0_iter3_reg <= icmp_ln32_reg_1401_pp0_iter2_reg;
        icmp_ln32_reg_1401_pp0_iter4_reg <= icmp_ln32_reg_1401_pp0_iter3_reg;
        n_0_reg_410_pp0_iter2_reg <= n_0_reg_410_pp0_iter1_reg;
        n_0_reg_410_pp0_iter3_reg <= n_0_reg_410_pp0_iter2_reg;
        n_0_reg_410_pp0_iter4_reg <= n_0_reg_410_pp0_iter3_reg;
        n_0_reg_410_pp0_iter5_reg <= n_0_reg_410_pp0_iter4_reg;
        select_ln32_7_reg_1571 <= select_ln32_7_fu_983_p3;
        tmp_12_reg_1438_pp0_iter2_reg <= tmp_12_reg_1438_pp0_iter1_reg;
        tmp_15_reg_1445_pp0_iter2_reg <= tmp_15_reg_1445_pp0_iter1_reg;
        tmp_15_reg_1445_pp0_iter3_reg <= tmp_15_reg_1445_pp0_iter2_reg;
        tmp_18_reg_1452_pp0_iter2_reg <= tmp_18_reg_1452_pp0_iter1_reg;
        tmp_18_reg_1452_pp0_iter3_reg <= tmp_18_reg_1452_pp0_iter2_reg;
        tmp_21_reg_1459_pp0_iter2_reg <= tmp_21_reg_1459_pp0_iter1_reg;
        tmp_21_reg_1459_pp0_iter3_reg <= tmp_21_reg_1459_pp0_iter2_reg;
        tmp_21_reg_1459_pp0_iter4_reg <= tmp_21_reg_1459_pp0_iter3_reg;
        tmp_24_reg_1466_pp0_iter2_reg <= tmp_24_reg_1466_pp0_iter1_reg;
        tmp_24_reg_1466_pp0_iter3_reg <= tmp_24_reg_1466_pp0_iter2_reg;
        tmp_24_reg_1466_pp0_iter4_reg <= tmp_24_reg_1466_pp0_iter3_reg;
        tmp_27_reg_1473_pp0_iter2_reg <= tmp_27_reg_1473_pp0_iter1_reg;
        tmp_27_reg_1473_pp0_iter3_reg <= tmp_27_reg_1473_pp0_iter2_reg;
        tmp_27_reg_1473_pp0_iter4_reg <= tmp_27_reg_1473_pp0_iter3_reg;
        tmp_27_reg_1473_pp0_iter5_reg <= tmp_27_reg_1473_pp0_iter4_reg;
        tmp_30_reg_1480_pp0_iter2_reg <= tmp_30_reg_1480_pp0_iter1_reg;
        tmp_30_reg_1480_pp0_iter3_reg <= tmp_30_reg_1480_pp0_iter2_reg;
        tmp_30_reg_1480_pp0_iter4_reg <= tmp_30_reg_1480_pp0_iter3_reg;
        tmp_30_reg_1480_pp0_iter5_reg <= tmp_30_reg_1480_pp0_iter4_reg;
        tmp_9_reg_1431_pp0_iter2_reg <= tmp_9_reg_1431_pp0_iter1_reg;
        trunc_ln25_reg_1396_pp0_iter2_reg <= trunc_ln25_reg_1396_pp0_iter1_reg;
        trunc_ln25_reg_1396_pp0_iter3_reg <= trunc_ln25_reg_1396_pp0_iter2_reg;
        trunc_ln25_reg_1396_pp0_iter4_reg <= trunc_ln25_reg_1396_pp0_iter3_reg;
        trunc_ln25_reg_1396_pp0_iter5_reg <= trunc_ln25_reg_1396_pp0_iter4_reg;
        trunc_ln37_13_reg_1566 <= trunc_ln37_13_fu_931_p1;
        trunc_ln37_17_reg_1592 <= trunc_ln37_17_fu_1081_p1;
        trunc_ln37_5_reg_1524 <= trunc_ln37_5_fu_741_p1;
        trunc_ln37_9_reg_1545 <= trunc_ln37_9_fu_836_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_422_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        divword_reg_1407 <= divword_fu_486_p3;
        icmp_ln32_reg_1401 <= icmp_ln32_fu_474_p2;
        tmp_12_reg_1438 <= tmp_1_fu_434_p12[32'd7];
        tmp_15_reg_1445 <= tmp_1_fu_434_p12[32'd6];
        tmp_18_reg_1452 <= tmp_1_fu_434_p12[32'd5];
        tmp_21_reg_1459 <= tmp_1_fu_434_p12[32'd4];
        tmp_24_reg_1466 <= tmp_1_fu_434_p12[32'd3];
        tmp_27_reg_1473 <= tmp_1_fu_434_p12[32'd2];
        tmp_2_reg_1412 <= tmp_1_fu_434_p12[32'd11];
        tmp_30_reg_1480 <= tmp_1_fu_434_p12[32'd1];
        tmp_3_reg_1417 <= tmp_1_fu_434_p12[32'd10];
        tmp_6_reg_1424 <= tmp_1_fu_434_p12[32'd9];
        tmp_9_reg_1431 <= tmp_1_fu_434_p12[32'd8];
        trunc_ln25_reg_1396 <= trunc_ln25_fu_460_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_reg_1391 <= n_fu_428_p2;
    end
end

always @ (*) begin
    if ((icmp_ln23_fu_422_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1387 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_n_0_phi_fu_414_p4 = n_reg_1391;
    end else begin
        ap_phi_mux_n_0_phi_fu_414_p4 = n_0_reg_410;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_0 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_0 = quotient_0_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_1 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_1 = quotient_1_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_2 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_2 = quotient_2_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_3 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_3 = quotient_3_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_4 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_4 = quotient_4_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_5 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_5 = quotient_5_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_6 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_6 = quotient_6_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_7 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_7 = quotient_7_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        quotient_8 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_8 = quotient_8_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1) & ((n_0_reg_410_pp0_iter5_reg == 4'd9) | ((n_0_reg_410_pp0_iter5_reg == 4'd10) | ((n_0_reg_410_pp0_iter5_reg == 4'd11) | ((n_0_reg_410_pp0_iter5_reg == 4'd12) | ((n_0_reg_410_pp0_iter5_reg == 4'd13) | ((n_0_reg_410_pp0_iter5_reg == 4'd14) | (n_0_reg_410_pp0_iter5_reg == 4'd15))))))))) begin
        quotient_9 = zext_ln32_fu_1373_p1;
    end else begin
        quotient_9 = quotient_9_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_0 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_0 = remainder_0_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_1 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_1 = remainder_1_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_2 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_2 = remainder_2_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_3 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_3 = remainder_3_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_4 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_4 = remainder_4_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_5 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_5 = remainder_5_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_6 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_6 = remainder_6_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_7 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_7 = remainder_7_preg;
    end
end

always @ (*) begin
    if (((n_0_reg_410_pp0_iter5_reg == 4'd8) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        remainder_8 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_8 = remainder_8_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter6 == 1'b1) & ((n_0_reg_410_pp0_iter5_reg == 4'd9) | ((n_0_reg_410_pp0_iter5_reg == 4'd10) | ((n_0_reg_410_pp0_iter5_reg == 4'd11) | ((n_0_reg_410_pp0_iter5_reg == 4'd12) | ((n_0_reg_410_pp0_iter5_reg == 4'd13) | ((n_0_reg_410_pp0_iter5_reg == 4'd14) | (n_0_reg_410_pp0_iter5_reg == 4'd15))))))))) begin
        remainder_9 = select_ln32_24_fu_1347_p3;
    end else begin
        remainder_9 = remainder_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln23_fu_422_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln23_fu_422_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_1_fu_1335_p2 = ($signed(or_ln37_10_fu_1306_p3) + $signed(32'd4294967283));

assign add_ln33_fu_480_p2 = ($signed(trunc_ln1_fu_464_p4) + $signed(20'd1048563));

assign add_ln37_10_fu_1281_p2 = ($signed(tmp_31_fu_1268_p3) + $signed(31'd2147483635));

assign add_ln37_1_fu_640_p2 = ($signed(tmp_4_fu_633_p3) + $signed(31'd2147483635));

assign add_ln37_2_fu_686_p2 = ($signed(tmp_7_fu_679_p3) + $signed(31'd2147483635));

assign add_ln37_3_fu_735_p2 = ($signed(tmp_10_fu_728_p3) + $signed(31'd2147483635));

assign add_ln37_4_fu_781_p2 = ($signed(tmp_13_fu_774_p3) + $signed(31'd2147483635));

assign add_ln37_5_fu_830_p2 = ($signed(tmp_16_fu_823_p3) + $signed(31'd2147483635));

assign add_ln37_6_fu_876_p2 = ($signed(tmp_19_fu_869_p3) + $signed(31'd2147483635));

assign add_ln37_7_fu_925_p2 = ($signed(tmp_22_fu_918_p3) + $signed(31'd2147483635));

assign add_ln37_8_fu_1026_p2 = ($signed(tmp_25_fu_1019_p3) + $signed(31'd2147483635));

assign add_ln37_9_fu_1075_p2 = ($signed(tmp_28_fu_1068_p3) + $signed(31'd2147483635));

assign add_ln37_fu_598_p2 = ($signed(zext_ln37_fu_588_p1) + $signed(31'd2147483635));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign divword_fu_486_p3 = ((icmp_ln32_fu_474_p2[0:0] === 1'b1) ? add_ln33_fu_480_p2 : trunc_ln1_fu_464_p4);

assign icmp_ln23_fu_422_p2 = ((ap_phi_mux_n_0_phi_fu_414_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln32_10_fu_1062_p2 = ((or_ln37_9_fu_1055_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_11_fu_1262_p2 = ((or_ln37_s_fu_1240_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_12_fu_1329_p2 = ((or_ln37_10_fu_1306_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_592_p2 = ((or_ln_fu_582_p3 > 21'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_2_fu_627_p2 = ((or_ln37_1_fu_620_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_3_fu_673_p2 = ((or_ln37_2_fu_666_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_4_fu_722_p2 = ((or_ln37_3_fu_715_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_5_fu_768_p2 = ((or_ln37_4_fu_761_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_6_fu_817_p2 = ((or_ln37_5_fu_810_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_7_fu_863_p2 = ((or_ln37_6_fu_856_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_8_fu_912_p2 = ((or_ln37_7_fu_905_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_9_fu_1013_p2 = ((or_ln37_8_fu_1006_p3 > 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_474_p2 = ((tmp_1_fu_434_p12 > 32'd53247) ? 1'b1 : 1'b0);

assign n_fu_428_p2 = (ap_phi_mux_n_0_phi_fu_414_p4 + 4'd1);

assign or_ln34_10_fu_1341_p2 = (shl_ln31_9_fu_1321_p3 | 13'd1);

assign or_ln34_1_fu_977_p2 = (shl_ln_fu_969_p3 | 4'd1);

assign or_ln34_2_fu_1092_p2 = (shl_ln31_1_fu_1085_p3 | 5'd1);

assign or_ln34_3_fu_1113_p2 = (shl_ln31_2_fu_1105_p3 | 6'd1);

assign or_ln34_4_fu_1134_p2 = (shl_ln31_3_fu_1126_p3 | 7'd1);

assign or_ln34_5_fu_1155_p2 = (shl_ln31_4_fu_1147_p3 | 8'd1);

assign or_ln34_6_fu_1176_p2 = (shl_ln31_5_fu_1168_p3 | 9'd1);

assign or_ln34_7_fu_1197_p2 = (shl_ln31_6_fu_1189_p3 | 10'd1);

assign or_ln34_8_fu_1218_p2 = (shl_ln31_7_fu_1210_p3 | 11'd1);

assign or_ln34_9_fu_1275_p2 = (shl_ln31_8_fu_1254_p3 | 12'd1);

assign or_ln34_fu_956_p2 = (select_ln32_2_fu_949_p3 | 3'd1);

assign or_ln37_10_fu_1306_p3 = {{select_ln32_22_fu_1298_p3}, {trunc_ln25_reg_1396_pp0_iter5_reg}};

assign or_ln37_1_fu_620_p3 = {{select_ln32_3_fu_608_p3}, {tmp_3_reg_1417}};

assign or_ln37_2_fu_666_p3 = {{select_ln32_4_fu_656_p3}, {tmp_6_reg_1424_pp0_iter1_reg}};

assign or_ln37_3_fu_715_p3 = {{select_ln32_6_fu_703_p3}, {tmp_9_reg_1431_pp0_iter1_reg}};

assign or_ln37_4_fu_761_p3 = {{select_ln32_8_fu_751_p3}, {tmp_12_reg_1438_pp0_iter2_reg}};

assign or_ln37_5_fu_810_p3 = {{select_ln32_10_fu_798_p3}, {tmp_15_reg_1445_pp0_iter2_reg}};

assign or_ln37_6_fu_856_p3 = {{select_ln32_12_fu_846_p3}, {tmp_18_reg_1452_pp0_iter3_reg}};

assign or_ln37_7_fu_905_p3 = {{select_ln32_14_fu_893_p3}, {tmp_21_reg_1459_pp0_iter3_reg}};

assign or_ln37_8_fu_1006_p3 = {{select_ln32_16_fu_996_p3}, {tmp_24_reg_1466_pp0_iter4_reg}};

assign or_ln37_9_fu_1055_p3 = {{select_ln32_18_fu_1043_p3}, {tmp_27_reg_1473_pp0_iter4_reg}};

assign or_ln37_s_fu_1240_p3 = {{select_ln32_20_fu_1230_p3}, {tmp_30_reg_1480_pp0_iter5_reg}};

assign or_ln_fu_582_p3 = {{divword_reg_1407}, {tmp_2_reg_1412}};

assign select_ln32_10_fu_798_p3 = ((icmp_ln32_5_fu_768_p2[0:0] === 1'b1) ? add_ln37_4_fu_781_p2 : tmp_11_fu_791_p3);

assign select_ln32_11_fu_1119_p3 = ((icmp_ln32_5_reg_1529_pp0_iter5_reg[0:0] === 1'b1) ? or_ln34_3_fu_1113_p2 : shl_ln31_2_fu_1105_p3);

assign select_ln32_12_fu_846_p3 = ((icmp_ln32_6_reg_1534[0:0] === 1'b1) ? add_ln37_5_reg_1540 : tmp_14_fu_840_p3);

assign select_ln32_13_fu_1140_p3 = ((icmp_ln32_6_reg_1534_pp0_iter5_reg[0:0] === 1'b1) ? or_ln34_4_fu_1134_p2 : shl_ln31_3_fu_1126_p3);

assign select_ln32_14_fu_893_p3 = ((icmp_ln32_7_fu_863_p2[0:0] === 1'b1) ? add_ln37_6_fu_876_p2 : tmp_17_fu_886_p3);

assign select_ln32_15_fu_1161_p3 = ((icmp_ln32_7_reg_1550_pp0_iter5_reg[0:0] === 1'b1) ? or_ln34_5_fu_1155_p2 : shl_ln31_4_fu_1147_p3);

assign select_ln32_16_fu_996_p3 = ((icmp_ln32_8_reg_1555[0:0] === 1'b1) ? add_ln37_7_reg_1561 : tmp_20_fu_990_p3);

assign select_ln32_17_fu_1182_p3 = ((icmp_ln32_8_reg_1555_pp0_iter5_reg[0:0] === 1'b1) ? or_ln34_6_fu_1176_p2 : shl_ln31_5_fu_1168_p3);

assign select_ln32_18_fu_1043_p3 = ((icmp_ln32_9_fu_1013_p2[0:0] === 1'b1) ? add_ln37_8_fu_1026_p2 : tmp_23_fu_1036_p3);

assign select_ln32_19_fu_1203_p3 = ((icmp_ln32_9_reg_1576[0:0] === 1'b1) ? or_ln34_7_fu_1197_p2 : shl_ln31_6_fu_1189_p3);

assign select_ln32_20_fu_1230_p3 = ((icmp_ln32_10_reg_1581[0:0] === 1'b1) ? add_ln37_9_reg_1587 : tmp_26_fu_1224_p3);

assign select_ln32_21_fu_1247_p3 = ((icmp_ln32_10_reg_1581[0:0] === 1'b1) ? or_ln34_8_fu_1218_p2 : shl_ln31_7_fu_1210_p3);

assign select_ln32_22_fu_1298_p3 = ((icmp_ln32_11_fu_1262_p2[0:0] === 1'b1) ? add_ln37_10_fu_1281_p2 : tmp_29_fu_1291_p3);

assign select_ln32_23_fu_1313_p3 = ((icmp_ln32_11_fu_1262_p2[0:0] === 1'b1) ? or_ln34_9_fu_1275_p2 : shl_ln31_8_fu_1254_p3);

assign select_ln32_24_fu_1347_p3 = ((icmp_ln32_12_fu_1329_p2[0:0] === 1'b1) ? add_ln33_1_fu_1335_p2 : or_ln37_10_fu_1306_p3);

assign select_ln32_25_fu_1365_p3 = ((icmp_ln32_12_fu_1329_p2[0:0] === 1'b1) ? or_ln34_10_fu_1341_p2 : shl_ln31_9_fu_1321_p3);

assign select_ln32_2_fu_949_p3 = ((icmp_ln32_1_reg_1487_pp0_iter4_reg[0:0] === 1'b1) ? select_ln34_fu_942_p3 : select_ln32_fu_935_p3);

assign select_ln32_3_fu_608_p3 = ((icmp_ln32_1_fu_592_p2[0:0] === 1'b1) ? add_ln37_fu_598_p2 : zext_ln37_1_fu_604_p1);

assign select_ln32_4_fu_656_p3 = ((icmp_ln32_2_reg_1492[0:0] === 1'b1) ? add_ln37_1_reg_1498 : tmp_5_fu_650_p3);

assign select_ln32_5_fu_962_p3 = ((icmp_ln32_2_reg_1492_pp0_iter4_reg[0:0] === 1'b1) ? or_ln34_fu_956_p2 : select_ln32_2_fu_949_p3);

assign select_ln32_6_fu_703_p3 = ((icmp_ln32_3_fu_673_p2[0:0] === 1'b1) ? add_ln37_2_fu_686_p2 : tmp_8_fu_696_p3);

assign select_ln32_7_fu_983_p3 = ((icmp_ln32_3_reg_1508_pp0_iter4_reg[0:0] === 1'b1) ? or_ln34_1_fu_977_p2 : shl_ln_fu_969_p3);

assign select_ln32_8_fu_751_p3 = ((icmp_ln32_4_reg_1513[0:0] === 1'b1) ? add_ln37_3_reg_1519 : tmp_s_fu_745_p3);

assign select_ln32_9_fu_1098_p3 = ((icmp_ln32_4_reg_1513_pp0_iter5_reg[0:0] === 1'b1) ? or_ln34_2_fu_1092_p2 : shl_ln31_1_fu_1085_p3);

assign select_ln32_fu_935_p3 = ((icmp_ln32_reg_1401_pp0_iter4_reg[0:0] === 1'b1) ? 3'd4 : 3'd0);

assign select_ln34_fu_942_p3 = ((icmp_ln32_reg_1401_pp0_iter4_reg[0:0] === 1'b1) ? 3'd6 : 3'd2);

assign shl_ln31_1_fu_1085_p3 = {{select_ln32_7_reg_1571}, {1'd0}};

assign shl_ln31_2_fu_1105_p3 = {{select_ln32_9_fu_1098_p3}, {1'd0}};

assign shl_ln31_3_fu_1126_p3 = {{select_ln32_11_fu_1119_p3}, {1'd0}};

assign shl_ln31_4_fu_1147_p3 = {{select_ln32_13_fu_1140_p3}, {1'd0}};

assign shl_ln31_5_fu_1168_p3 = {{select_ln32_15_fu_1161_p3}, {1'd0}};

assign shl_ln31_6_fu_1189_p3 = {{select_ln32_17_fu_1182_p3}, {1'd0}};

assign shl_ln31_7_fu_1210_p3 = {{select_ln32_19_fu_1203_p3}, {1'd0}};

assign shl_ln31_8_fu_1254_p3 = {{select_ln32_21_fu_1247_p3}, {1'd0}};

assign shl_ln31_9_fu_1321_p3 = {{select_ln32_23_fu_1313_p3}, {1'd0}};

assign shl_ln_fu_969_p3 = {{select_ln32_5_fu_962_p3}, {1'd0}};

assign tmp_10_fu_728_p3 = {{trunc_ln37_4_fu_711_p1}, {tmp_9_reg_1431_pp0_iter1_reg}};

assign tmp_11_fu_791_p3 = {{trunc_ln37_7_fu_787_p1}, {tmp_12_reg_1438_pp0_iter2_reg}};

assign tmp_13_fu_774_p3 = {{trunc_ln37_6_fu_757_p1}, {tmp_12_reg_1438_pp0_iter2_reg}};

assign tmp_14_fu_840_p3 = {{trunc_ln37_9_reg_1545}, {tmp_15_reg_1445_pp0_iter3_reg}};

assign tmp_16_fu_823_p3 = {{trunc_ln37_8_fu_806_p1}, {tmp_15_reg_1445_pp0_iter2_reg}};

assign tmp_17_fu_886_p3 = {{trunc_ln37_11_fu_882_p1}, {tmp_18_reg_1452_pp0_iter3_reg}};

assign tmp_19_fu_869_p3 = {{trunc_ln37_10_fu_852_p1}, {tmp_18_reg_1452_pp0_iter3_reg}};

assign tmp_20_fu_990_p3 = {{trunc_ln37_13_reg_1566}, {tmp_21_reg_1459_pp0_iter4_reg}};

assign tmp_22_fu_918_p3 = {{trunc_ln37_12_fu_901_p1}, {tmp_21_reg_1459_pp0_iter3_reg}};

assign tmp_23_fu_1036_p3 = {{trunc_ln37_15_fu_1032_p1}, {tmp_24_reg_1466_pp0_iter4_reg}};

assign tmp_25_fu_1019_p3 = {{trunc_ln37_14_fu_1002_p1}, {tmp_24_reg_1466_pp0_iter4_reg}};

assign tmp_26_fu_1224_p3 = {{trunc_ln37_17_reg_1592}, {tmp_27_reg_1473_pp0_iter5_reg}};

assign tmp_28_fu_1068_p3 = {{trunc_ln37_16_fu_1051_p1}, {tmp_27_reg_1473_pp0_iter4_reg}};

assign tmp_29_fu_1291_p3 = {{trunc_ln37_19_fu_1287_p1}, {tmp_30_reg_1480_pp0_iter5_reg}};

assign tmp_31_fu_1268_p3 = {{trunc_ln37_18_fu_1236_p1}, {tmp_30_reg_1480_pp0_iter5_reg}};

assign tmp_4_fu_633_p3 = {{trunc_ln37_fu_616_p1}, {tmp_3_reg_1417}};

assign tmp_5_fu_650_p3 = {{trunc_ln37_1_reg_1503}, {tmp_3_reg_1417_pp0_iter1_reg}};

assign tmp_7_fu_679_p3 = {{trunc_ln37_2_fu_662_p1}, {tmp_6_reg_1424_pp0_iter1_reg}};

assign tmp_8_fu_696_p3 = {{trunc_ln37_3_fu_692_p1}, {tmp_6_reg_1424_pp0_iter1_reg}};

assign tmp_s_fu_745_p3 = {{trunc_ln37_5_reg_1524}, {tmp_9_reg_1431_pp0_iter2_reg}};

assign trunc_ln1_fu_464_p4 = {{tmp_1_fu_434_p12[31:12]}};

assign trunc_ln25_fu_460_p1 = tmp_1_fu_434_p12[0:0];

assign trunc_ln37_10_fu_852_p1 = select_ln32_12_fu_846_p3[29:0];

assign trunc_ln37_11_fu_882_p1 = select_ln32_12_fu_846_p3[29:0];

assign trunc_ln37_12_fu_901_p1 = select_ln32_14_fu_893_p3[29:0];

assign trunc_ln37_13_fu_931_p1 = select_ln32_14_fu_893_p3[29:0];

assign trunc_ln37_14_fu_1002_p1 = select_ln32_16_fu_996_p3[29:0];

assign trunc_ln37_15_fu_1032_p1 = select_ln32_16_fu_996_p3[29:0];

assign trunc_ln37_16_fu_1051_p1 = select_ln32_18_fu_1043_p3[29:0];

assign trunc_ln37_17_fu_1081_p1 = select_ln32_18_fu_1043_p3[29:0];

assign trunc_ln37_18_fu_1236_p1 = select_ln32_20_fu_1230_p3[29:0];

assign trunc_ln37_19_fu_1287_p1 = select_ln32_20_fu_1230_p3[29:0];

assign trunc_ln37_1_fu_646_p1 = select_ln32_3_fu_608_p3[29:0];

assign trunc_ln37_2_fu_662_p1 = select_ln32_4_fu_656_p3[29:0];

assign trunc_ln37_3_fu_692_p1 = select_ln32_4_fu_656_p3[29:0];

assign trunc_ln37_4_fu_711_p1 = select_ln32_6_fu_703_p3[29:0];

assign trunc_ln37_5_fu_741_p1 = select_ln32_6_fu_703_p3[29:0];

assign trunc_ln37_6_fu_757_p1 = select_ln32_8_fu_751_p3[29:0];

assign trunc_ln37_7_fu_787_p1 = select_ln32_8_fu_751_p3[29:0];

assign trunc_ln37_8_fu_806_p1 = select_ln32_10_fu_798_p3[29:0];

assign trunc_ln37_9_fu_836_p1 = select_ln32_10_fu_798_p3[29:0];

assign trunc_ln37_fu_616_p1 = select_ln32_3_fu_608_p3[29:0];

assign zext_ln32_fu_1373_p1 = select_ln32_25_fu_1365_p3;

assign zext_ln37_1_fu_604_p1 = or_ln_fu_582_p3;

assign zext_ln37_fu_588_p1 = or_ln_fu_582_p3;

always @ (posedge ap_clk) begin
    quotient_8_preg[31:13] <= 19'b0000000000000000000;
    quotient_7_preg[31:13] <= 19'b0000000000000000000;
    quotient_6_preg[31:13] <= 19'b0000000000000000000;
    quotient_5_preg[31:13] <= 19'b0000000000000000000;
    quotient_4_preg[31:13] <= 19'b0000000000000000000;
    quotient_3_preg[31:13] <= 19'b0000000000000000000;
    quotient_2_preg[31:13] <= 19'b0000000000000000000;
    quotient_1_preg[31:13] <= 19'b0000000000000000000;
    quotient_0_preg[31:13] <= 19'b0000000000000000000;
    quotient_9_preg[31:13] <= 19'b0000000000000000000;
end

endmodule //div13
